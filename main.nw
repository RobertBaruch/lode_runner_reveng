\documentclass[10pt]{report}
\usepackage {noweb}
\usepackage {graphicx}
\graphicspath { {./images/} }

\usepackage[table,dvipsnames]{xcolor}
\definecolor {apple_white}{rgb}{0.9,0.9,0.9}
\def \bk0 {\cellcolor{black}}
\def \bl0 {\cellcolor{Cerulean}}
\def \bw0 {\cellcolor{apple_white}}
\def \bo0 {\cellcolor{orange}}

\usepackage {booktabs}
\usepackage {tikz}
\usetikzlibrary {positioning, shapes.geometric, svg.path}

\noweboptions {smallcode,longchunks}

% Generate assembly file with:
% notangle -Rpreamble main.nw > main.asm
%
% Generate tex file with:
% noweave -delay -index main.nw > main.tex
% pdflatex main.tex (run twice for two passes)
% Indents in code only appears in the PDF output
% under TeX Live 2019.
%
% See also: https://www.cs.tufts.edu/~nr/noweb/johnson-lj.pdf

\begin{document}
\pagestyle{noweb}

@ \chapter{Lode Runner}

Lode Runner was a game originally written in 1982 by Douglas E. Smith (1960--2014) for
the Apple II series of computers, and published by Broderbund.

\begin{center}
\includegraphics[width=\columnwidth]{title-screen}
\end{center}

You control the movement of your character, moving left and right along brick
and bedrock platforms, climbing ladders,
and "monkey-traversing" ropes strung across gaps. The object is to collect all the
gold boxes while avoiding being touched by the guards. You can dig holes in
brick parts of the floor which can allow you to reach otherwise unreachable caverns,
and the holes can also trap the guards for a short while. Holes fill themselves in
after a short time period, and if you're in a hole when that happens, you lose
a life. However, if a guard is in the hole and the hole fills, the guard disappears and
reappears somewhere along the top of the screen.

You get points for collecting boxes and forcing guards to respawn. Once you collect
all the boxes, a ladder will appear leading out of the top of the screen. This
gets you to the next level, and play continues.

\begin{center}
\includegraphics[width=\columnwidth]{screen}
\end{center}

Lode Runner included 150 levels and also a level editor.

\chapter{Apple II Graphics}
Hi-res graphics on the Apple II is odd. Graphics are memory-mapped, not exactly
consecutively, and bits don't always correspond to pixels. Color especially is
odd, compared to today's luxurious 32-bit per pixel RGBA.

The Apple II has two hi-res graphics pages, and maps the area from [[$2000-$3FFF]] to
high-res graphics page 1 (HGR1), and [[$4000-$5FFF]] to page 2 (HGR2).

We have routines to clear these screens.

<<defines>>=
    ORG     $0A
TMP_PTR         DS.W    1
@ %def TMP_PTR

<<routines>>=
    ORG     $7A51
CLEAR_HGR1:
    SUBROUTINE

    LDA     #$20                ; Start at $2000
    LDX     #$40                ; End at $4000 (but not including)
    BNE     CLEAR_PAGE          ; Unconditional jump

CLEAR_HGR2:
    SUBROUTINE

    LDA     #$40                ; Start at $4000
    LDX     #$60                ; End at $6000 (but not including)
    ; fallthrough

CLEAR_PAGE:
    STA     TMP_PTR+1           ; Start with the page in A.
    LDA     #$00
    STA     TMP_PTR
    TAY
    LDA     #$80                ; fill byte = 0x80

.loop:
    STA     (TMP_PTR),Y
    INY
    BNE     .loop
    INC     TMP_PTR+1
    CPX     TMP_PTR+1
    BNE     .loop               ; while TMP_PTR != X * 0x100
    RTS
@ %def CLEAR_HGR1 CLEAR_HGR2

\section{Pixels and their color}
First we'll talk about pixels. Nominally, the resolution of the hi-res graphics screen
is 280 pixels wide by 192 pixels tall. In the memory map, each row is represented
by 40 bytes. The high bit of each byte is not used for pixel data, but is used to
control color.

Here are some rules for how these bytes are turned into pixels:
\begin{itemize}
  \item Pixels are drawn to the screen from byte data least significant bit first.
        This means that for the first byte bit 0 is column 0, bit 1 is column 1,
        and so on.
  \item A pattern of [[11]] results in two white pixels at the [[1]] positions.
  \item A pattern of [[010]] results at least in a colored pixel at the [[1]] position.
  \item A pattern of [[101]] results at least in a colored pixel at the [[0]] position.
  \item So, a pattern of [[01010]] results in at least three consecutive colored
        pixels starting from the first [[1]] to the last [[1]]. The last [[0]] bit
        would also be colored if followed by a [[1]].
  \item Likewise, a pattern of [[11011]] results in two white pixels, a colored pixel,
        and then two more white pixels.
  \item The color of a [[010]] pixel depends on the column that the [[1]] falls on, and
        also whether the high bit of its byte was set or not. 
  \item The color of a [[11011]] pixel depends on the column that the [[0]] falls on, and
        also whether the high bit of its byte was set or not.

        \begin{center}
        \begin{tabular}{@{}rcc@{}} \toprule
        & Odd & Even \\ \cmidrule(r){2-3}
        High bit clear & Green & Violet \\
        High bit set & Orange & Blue \\ \bottomrule
        \end{tabular}
        \end{center}

        The implication is that you can only select one pair of colors per byte.
\end{itemize}

An example would probably be good here. We will take one of the sprites from the game.

\begin{center}
\begin{tabular}{@{}rcc@{}} \toprule
Bytes & Bits & Pixel Data \\ \cmidrule{1-3}
[[00 00]] & [[0000000 0000000]] & [[00000000000000]] \\
[[00 00]] & [[0000000 0000000]] & [[00000000000000]] \\
[[00 00]] & [[0000000 0000000]] & [[00000000000000]] \\
[[55 00]] & [[1010101 0000000]] & [[10101010000000]] \\
[[41 00]] & [[1000001 0000000]] & [[10000010000000]] \\
[[01 00]] & [[0000001 0000000]] & [[10000000000000]] \\
[[55 00]] & [[1010101 0000000]] & [[10101010000000]] \\
[[50 00]] & [[1010000 0000000]] & [[00001010000000]] \\
[[50 00]] & [[1010000 0000000]] & [[00001010000000]] \\
[[51 00]] & [[1010001 0000000]] & [[10001010000000]] \\
[[55 00]] & [[1010101 0000000]] & [[10101010000000]] \\ \bottomrule
\end{tabular}
\end{center}

The game automatically sets the high bit of each byte, so we know we're going to see
orange and blue. Assuming that the following bits are all zero, and we place the
sprite starting at column 0, we should see this:

\begin{center}
\begin{tabular}{@{}rcccccccccccccc@{}}
 0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 1 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 2 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 3 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 4 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 5 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 6 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 7 & \bk0 & \bk0 & \bk0 & \bk0 & \bl0 & \bl0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 8 & \bk0 & \bk0 & \bk0 & \bk0 & \bl0 & \bl0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
 9 & \bl0 & \bk0 & \bk0 & \bk0 & \bl0 & \bl0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
10 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
\end{tabular}
\end{center}

Here is a more complex sprite:

\begin{center}
\begin{tabular}{@{}rcc@{}} \toprule
Bytes & Bits & Pixel Data \\ \cmidrule{1-3}
[[40 00]] & [[1000000 0000000]] & [[00000010000000]] \\
[[60 01]] & [[1100000 0000001]] & [[00000111000000]] \\
[[60 01]] & [[1100000 0000001]] & [[00000111000000]] \\
[[70 00]] & [[1110000 0000000]] & [[00001110000000]] \\
[[6C 01]] & [[1101100 0000001]] & [[00110111000000]] \\
[[36 06]] & [[0110110 0000110]] & [[01101100110000]] \\
[[30 00]] & [[0110000 0000000]] & [[00001100000000]] \\
[[70 00]] & [[1110000 0000000]] & [[00001110000000]] \\
[[5E 01]] & [[1011110 0000001]] & [[01111011000000]] \\
[[40 01]] & [[1000000 0000001]] & [[00000011000000]] \\
[[40 01]] & [[1000000 0000001]] & [[00000011000000]] \\ \bottomrule
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{@{}rcccccccccccccc@{}}
0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bl0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
1 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
2 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
3 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
4 & \bk0 & \bk0 & \bw0 & \bw0 & \bo0 & \bw0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
5 & \bk0 & \bw0 & \bw0 & \bl0 & \bw0 & \bw0 & \bk0 & \bk0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 \\
6 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
7 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
8 & \bk0 & \bw0 & \bw0 & \bw0 & \bw0 & \bl0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
9 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
10 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bw0 & \bw0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 & \bk0 \\
\end{tabular}
\end{center}

Take note of the orange and blue pixels. All the patterns noted in the rules above are used.

\section{The sprites}
Lode Runner defines 104 sprites, each being 11 rows, with two bytes per row. The first bytes of
all 104 sprites are in the table first, then the second bytes, then the third bytes, and so on.
Later we will see that only the leftmost 10 pixels out of the 14-pixel description is used.

<<tables>>=
    ORG     $AD00
SPRITE_DATA:
    INCLUDE "sprite_data.asm"
@ %def SPRITE_DATA

\input{sprite_tables.tex}

\section{Shifting sprites}
This is all very good if we're going to draw sprites exactly on 7-pixel
boundaries, but what if we want to draw them starting at other columns?
In general, such a shifted sprite would straddle three bytes, and Lode
Runner sets aside an area of memory at the end of zero page for 11 rows
of three bytes that we'll write to when we want to compute the data for
a shifted sprite.

<<defines>>=
    ORG     $DF
BLOCK_DATA      DS      33
@ %def BLOCK_DATA

Lode Runner also contains tables which show how to shift any arbitrary
7-pixel pattern right by any amount from zero to six pixels.

For example, suppose we start with a pixel pattern of [[0110001]], and we want to
shift that right by three bits. The 14-bit result would be [[0000110 0010000]].
However, we have to break that up into bytes, reverse the bits (remember that
each byte's bits are output as pixels least significant bit first), and set
their high bits, so we end up with [[10110000 10000100]].

Now, given a shift amount and a pixel pattern, we should be able to find the
two-byte shifted pattern. Lode Runner accomplishes this with table lookups as follows:

\vspace{1em}
\begin{tikzpicture}
  [basicbox/.style={draw,rectangle,inner sep=0pt,minimum width=1.5cm,minimum height=1.5cm,fill=blue!10},
   pageoffsets/.style={basicbox,minimum height=1cm,text height=1.5ex,text depth=.25ex},
   multilinebox/.style={basicbox,text width=1cm,align=center}]
  \node (pixelshiftpages) at (0,0) [multilinebox] {pixel shift pages};
  \node (start) at (-3,0) {};
  \draw [->] (start) -- (pixelshiftpages) node [above,text width=1cm,align=center,midway] {shift amount};
  \node (offsets0) [pageoffsets,anchor=north,below right=0 and 2 of pixelshiftpages.north east] {offsets};
  \node (pages0) [pageoffsets,below=0 of offsets0.south] {pages};
  \node (offsets1) [pageoffsets,below=0 of pages0.south,fill=blue!30] {offsets};
  \node (pages1) [pageoffsets,below=0 of offsets1.south,fill=blue!30] {pages};
  \node (offsets2) [pageoffsets,below=0 of pages1.south] {offsets};
  \node (pages2) [pageoffsets,below=0 of offsets2.south] {pages};
  \draw [->] (pixelshiftpages) -- (offsets1.north west) {};
  \node (pixelpattern) [above left=1 and 0 of offsets0.north west] {pixel pattern};
  \draw [->] (pixelpattern.south) |- (offsets1.west) {};
  \draw [->] (pixelpattern.south) |- (pages1.west) {};
  \node (patterntable) [multilinebox,minimum height=4cm,text width=1.2cm,anchor=north west,below right=0 and 2 of offsets0.north east] {pixel pattern table};
  \node (join) [inner sep=0pt,below right=0 and 1 of offsets1.south east] {};
  \draw (offsets1.east) -- (join);
  \draw (pages1.east) -- (join);
  \draw [->] (join) -- ([yshift=5mm]patterntable.west);
\end{tikzpicture}
\vspace{1em}

The pixel pattern table is a table of every possible pattern of 7 consecutive pixels
spread out over two bytes. This table is 512 entries, each entry being two bytes.
A naive table would have redundancy. For example the pattern [[0000100]] starting
at column 0 is exactly the same as the pattern [[0001000]] starting at column 1.
This table eliminates that redundancy.

<<tables>>=
    ORG     $A900
PIXEL_PATTERN_TABLE:
    INCLUDE "pixel_pattern_table.asm"
@ %def PIXEL_PATTERN_TABLE

Now we just need tables which index into [[PIXEL_PATTERN_TABLE]] for every
7-pixel pattern and shift value. This table works by having the page number
for the shifted pixel pattern at index [[shift * 0x100 + 0x80 + pattern]]
and the offset at index [[shift * 0x100 + pattern]].

<<tables>>=
    ORG     $A200
PIXEL_SHIFT_TABLE:
    INCLUDE "pixel_shift_table.asm"
@ %def PIXEL_SHIFT_TABLE

Rather than multiplying the shift value by [[0x100]], we instead define
another table which holds the page numbers for the shift tables for each
shift value.

<<tables>>=
    ORG     $84C1
PIXEL_SHIFT_PAGES:
    HEX     A2 A3 A4 A5 A6 A7 A8
@ %def PIXEL_SHIFT_PAGES

So we can get shifted pixels by indexing into all these tables.

Now we can define a routine that will take a sprite number and a pixel shift
amount, and write the shifted pixel data into the [[BLOCK_DATA]] area. The
routine first shifts the first byte of the sprite into a two-byte area. Then
it shifts the second byte of the sprite, and combines that two-byte result
with the first. Thus, we shift two bytes of sprite data into a three-byte
result.

\begin{center}
\begin{tikzpicture}
  [basicbox/.style={draw,rectangle,inner sep=0pt,minimum width=1.5cm,minimum height=0.5cm,fill=blue!10}]
  \node (spriterowbyte0) at (0,0) [basicbox] {};
  \node (spriterowbyte1) [basicbox,right=0 of spriterowbyte0.east] {};
  \node (spriterowlabel) [left=0.1 of spriterowbyte0.west] {sprite row};
  \node (shifted0byte0) [basicbox,below left=1 and 0 of spriterowbyte0.south west] {};
  \node (shifted0byte1) [basicbox,right=0 of shifted0byte0.east] {};
  \node (shifted1byte0) [basicbox,below right=2 and 0 of spriterowbyte0.south west] {};
  \node (shifted1byte1) [basicbox,right=0 of shifted1byte0.east] {};
  \node (orlabel) [below=0 of shifted0byte1] {OR};
  \draw [->] (spriterowbyte0.south) -- (shifted0byte0.north east)
    node [left,text width=1cm,align=center,midway] {shift};
  \draw [->] (spriterowbyte1.south) to [auto, bend left=45] node {shift} (shifted1byte0.north east);
  \node (result0) [basicbox,below left=0.5 and 0 of shifted1byte0.south west] {};
  \node (result1) [basicbox,right=0 of result0.east] {};
  \node (result2) [basicbox,right=0 of result1.east] {};
  \draw [->] (shifted0byte0) -- (result0) {};
  \draw [->] (shifted1byte0) -- (result1) {};
  \draw [->] (shifted1byte1) -- (result2) {};
  \node (blocklabel) [right=0.1 of result2.east] {block data};
\end{tikzpicture}
\end{center}

Rather than load addresses from the tables and store them, the routine
modifies its own instructions with those addresses.

<<defines>>=
    ORG     $1D
ROW_COUNT       DS      1
SPRITE_NUM      DS      1
@ %def ROW_COUNT SPRITE_NUM

<<routines>>=
    ORG     $8438
COMPUTE_SHIFTED_SPRITE:
    SUBROUTINE
    ; Enter routine with X set to pixel shift amount and
    ; SPRITE_NUM containing the sprite number to read.

.offset_table       EQU $A000               ; Target addresses in read
.page_table         EQU $A080               ; instructions. The only truly
.shift_ptr_byte0    EQU $A000               ; necessary value here is the
.shift_ptr_byte1    EQU $A000               ; 0x80 in .shift_ptr_byte0.

    LDA     #$0B                            ; 11 rows
    STA     ROW_COUNT
    LDA     #<SPRITE_DATA
    STA     TMP_PTR
    LDA     #>SPRITE_DATA
    STA     TMP_PTR+1                       ; TMP_PTR = SPRITE_DATA
    LDA     PIXEL_SHIFT_PAGES,X 
    STA     .rd_offset_table + 2
    STA     .rd_page_table + 2
    STA     .rd_offset_table2 + 2
    STA     .rd_page_table2 + 2             ; Fix up pages in lookup instructions
                                            ; based on shift amount (X).

    LDX     #$00                            ; X is the offset into BLOCK_DATA.

.loop:                                      ; === LOOP === (over all 11 rows)
    LDY     SPRITE_NUM
    LDA     (TMP_PTR),Y 
    TAY                                     ; Get sprite pixel data.

.rd_offset_table:
    LDA     .offset_table,Y                 ; Load offset for shift amount.
    STA     .rd_shift_ptr_byte0 + 1
    CLC
    ADC     #$01
    STA     .rd_shift_ptr_byte1 + 1         ; Fix up instruction offsets with it.
.rd_page_table:
    LDA     .page_table,Y                   ; Load page for shift amount.
    STA     .rd_shift_ptr_byte0 + 2
    STA     .rd_shift_ptr_byte1 + 2         ; Fix up instruction page with it.

.rd_shift_ptr_byte0:
    LDA     .shift_ptr_byte0                ; Read shifted pixel data byte 0
    STA     BLOCK_DATA,X                    ; and store in block data byte 0.
.rd_shift_ptr_byte1:
    LDA     .shift_ptr_byte1                ; Read shifted pixel data byte 1
    STA     BLOCK_DATA+1,X                  ; and store in block data byte 1.

    LDA     TMP_PTR
    CLC
    ADC     #$68
    STA     TMP_PTR
    LDA     TMP_PTR+1
    ADC     #$00
    STA     TMP_PTR+1                       ; TMP_PTR++

    ; Now basically do the same thing with the second sprite byte

    LDY     SPRITE_NUM
    LDA     (TMP_PTR),Y 
    TAY                                     ; Get sprite pixel data.

.rd_offset_table2:
    LDA     .offset_table,Y                 ; Load offset for shift amount.
    STA     .rd_shift_ptr2_byte0 + 1
    CLC
    ADC     #$01
    STA     .rd_shift_ptr2_byte1 + 1        ; Fix up instruction offsets with it.
.rd_page_table2:
    LDA     .page_table,Y                   ; Load page for shift amount.
    STA     .rd_shift_ptr2_byte0 + 2
    STA     .rd_shift_ptr2_byte1 + 2        ; Fix up instruction page with it.

.rd_shift_ptr2_byte0:
    LDA     .shift_ptr_byte0                ; Read shifted pixel data byte 0
    ORA     BLOCK_DATA+1,X                  ; OR with previous block data byte 1
    STA     BLOCK_DATA+1,X                  ; and store in block data byte 1.
.rd_shift_ptr2_byte1:
    LDA     .shift_ptr_byte1                ; Read shifted pixel data byte 1
    STA     BLOCK_DATA+2,X                  ; and store in block data byte 2.

    LDA     TMP_PTR
    CLC
    ADC     #$68
    STA     TMP_PTR
    LDA     TMP_PTR+1
    ADC     #$00
    STA     TMP_PTR+1                       ; TMP_PTR++

    INX
    INX
    INX                                     ; X += 3
    DEC     ROW_COUNT                       ; ROW_COUNT--
    BNE     .loop                           ; loop while ROW_COUNT > 0
    RTS
@ %def COMPUTE_SHIFTED_SPRITE

\section{Memory mapped graphics}

Within a screen row, consecutive bytes map to consecutive pixels. However, rows
themselves are not consecutive in memory.

To make it easy to convert a row number from 0 to 191 to a base address, Lode Runner has
a table and a routine to use that table.

<<tables>>=
    ORG     $1A85
ROW_TO_OFFSET_LO:
    INCLUDE "row_to_offset_lo_table.asm"
ROW_TO_OFFSET_HI:
    INCLUDE "row_to_offset_hi_table.asm"
@ %def ROW_TO_OFFSET_LO ROW_TO_OFFSET_HI

<<defines>>=
ROW_ADDR        EQU     $0C     ; 2 bytes
ROW_ADDR2       EQU     $0E     ; 2 bytes
HGR_PAGE        EQU     $1F     ; 0x20 for HGR1, 0x40 for HGR2
@ %def ROW_ADDR ROW_ADDR2 HGR_PAGE

<<routines>>=
    ORG     $7A31
ROW_TO_ADDR:
    SUBROUTINE
    ; Enter routine with Y set to row. Base address
    ; (for column 0) will be placed in ROW_ADDR.

    LDA     ROW_TO_OFFSET_LO,Y 
    STA     ROW_ADDR
    LDA     ROW_TO_OFFSET_HI,Y 
    ORA     HGR_PAGE
    STA     ROW_ADDR+1
    RTS
@ %def ROW_TO_ADDR

There's also a routine to load the address for both page 1 and page 2.

<<routines>>=
    ORG     $7A3E
ROW_TO_ADDR_FOR_BOTH_PAGES:
    SUBROUTINE
    ; Enter routine with Y set to row. Base address
    ; (for column 0) will be placed in ROW_ADDR (for page 1)
    ; and ROW_ADDR2 (for page 2).

    LDA     ROW_TO_OFFSET_LO,Y 
    STA     ROW_ADDR
    STA     ROW_ADDR2
    LDA     ROW_TO_OFFSET_HI,Y 
    ORA     #$20
    STA     ROW_ADDR+1
    EOR     #$60
    STA     ROW_ADDR2+1
    RTS
@ %def ROW_TO_ADDR_FOR_BOTH_PAGES


Lode Runner's screens are organized into 28 sprites across by 17 sprites
down. To convert between sprite coordinates and screen coordinates and vice-versa, we
use tables and lookup routines. Each sprite is 10 pixels across by 11 pixels down.

<<tables>>=
    ORG     $1C35
HALF_SCREEN_COL_TABLE:
    ; 28 cols of 5 double-pixels each
    HEX     00 05 0a 0f 14 19 1e 23 28 2d 32 37 3c 41 46 4b
    HEX     50 55 5a 5f 64 69 6e 73 78 7d 82 87
SCREEN_ROW_TABLE:
    ; 17 rows of 11 pixels each
    HEX     00 0B 16 21 2C 37 42 4D 58 63 6E 79 84 8F 9A A5
    HEX     B5
COL_BYTE_TABLE:
    ; Byte number
    HEX     00 01 02 04 05 07 08 0A 0B 0C 0E 0F 11 12 14 15
    HEX     16 18 19 1B 1C 1E 1F 20 22 23 25 26
COL_SHIFT_TABLE:
    ; Right shift amount
    HEX     00 03 06 02 05 01 04 00 03 06 02 05 01 04 00 03
    HEX     06 02 05 01 04 00 03 06 02 05 01 04
HALF_SCREEN_COL_BYTE_TABLE:
    HEX     00 00 00 00 01 01 01 02 02 02 02 03 03 03 04 04
    HEX     04 04 05 05 05 06 06 06 06 07 07 07 08 08 08 08
    HEX     09 09 09 0A 0A 0A 0A 0B 0B 0B 0C 0C 0C 0C 0D 0D
    HEX     0D 0E 0E 0E 0E 0F 0F 0F 10 10 10 10 11 11 11 12
    HEX     12 12 12 13 13 13 14 14 14 14 15 15 15 16 16 16
    HEX     16 17 17 17 18 18 18 18 19 19 19 1A 1A 1A 1A 1B
    HEX     1B 1B 1C 1C 1C 1C 1D 1D 1D 1E 1E 1E 1E 1F 1F 1F
    HEX     20 20 20 20 21 21 21 22 22 22 22 23 23 23 24 24
    HEX     24 24 25 25 25 26 26 26 26 27 27 27
HALF_SCREEN_COL_SHIFT_TABLE:
    HEX     00 02 04 06 01 03 05 00 02 04 06 01 03 05 00 02
    HEX     04 06 01 03 05 00 02 04 06 01 03 05 00 02 04 06
    HEX     01 03 05 00 02 04 06 01 03 05 00 02 04 06 01 03
    HEX     05 00 02 04 06 01 03 05 00 02 04 06 01 03 05 00
    HEX     02 04 06 01 03 05 00 02 04 06 01 03 05 00 02 04
    HEX     06 01 03 05 00 02 04 06 01 03 05 00 02 04 06 01
    HEX     03 05 00 02 04 06 01 03 05 00 02 04 06 01 03 05
    HEX     00 02 04 06 01 03 05 00 02 04 06 01 03 05 00 02
    HEX     04 06 01 03 05 00 02 04 06 01 03 05
@ %def SCREEN_ROW_TABLE COL_BYTE_TABLE HALF_SCREEN_COL_TABLE COL_SHIFT_TABLE HALF_SCREEN_COL_BYTE_TABLE HALF_SCREEN_COL_SHIFT_TABLE

Here is the routine to return the screen coordinates for the given sprite coordinates.
The reason that [[GET_SCREEN_COORDS_FOR]] returns half the screen column coordinate
is that otherwise the screen column coordinate wouldn't fit in a register.

<<routines>>=
    ORG     $885D
GET_SCREEN_COORDS_FOR:
    SUBROUTINE
    ; Enter routine with Y set to sprite row (0-16) and
    ; X set to sprite column (0-27). On return, Y will be set to
    ; screen row, and X is set to half screen column.

    LDA     SCREEN_ROW_TABLE,Y 
    PHA
    LDA     HALF_SCREEN_COL_TABLE,X 
    TAX                         ; X = HALF_SCREEN_COL_TABLE[X]
    PLA
    TAY                         ; Y = SCREEN_ROW_TABLE[Y]
    RTS
@ %def GET_SCREEN_COORDS_FOR 

This routine takes a sprite column and converts it to
the memory-mapped byte offset and right-shift amount.

<<routines>>=
    ORG     $8868
GET_BYTE_AND_SHIFT_FOR_COL:
    SUBROUTINE
    ; Enter routine with X set to sprite column. On
    ; return, A will be set to screen column byte number
    ; and X will be set to an additional right shift amount.

    LDA     COL_BYTE_TABLE,X 
    PHA                         ; A = COL_BYTE_TABLE[X]
    LDA     COL_SHIFT_TABLE,X 
    TAX                         ; X = COL_SHIFT_TABLE[X]
    PLA
    RTS
@ %def GET_BYTE_AND_SHIFT_FOR_COL

This routine takes half the screen column coordinate and converts it to
the memory-mapped byte offset and right-shift amount.

<<routines>>=
    ORG     $8872
GET_BYTE_AND_SHIFT_FOR_HALF_SCREEN_COL:
    SUBROUTINE
    ; Enter routine with X set to half screen column. On
    ; return, A will be set to screen column byte number
    ; and X will be set to an additional right shift amount.

    LDA     HALF_SCREEN_COL_BYTE_TABLE,X 
    PHA                         ; A = HALF_SCREEN_COL_BYTE_TABLE[X]
    LDA     HALF_SCREEN_COL_SHIFT_TABLE,X 
    TAX                         ; X = HALF_SCREEN_COL_SHIFT_TABLE[X]
    PLA
    RTS
@ %def GET_BYTE_AND_SHIFT_FOR_HALF_SCREEN_COL

We also have some utility routines that let us take a sprite row or column and
get its screen row or half column, but offset in either row or column by anywhere from
[[-2]] to [[+2]].

<<tables>>=
    ORG     $888A
ROW_OFFSET_TABLE:
    HEX     FB FD 00 02 04
@ %def ROW_OFFSET_TABLE

<<routines>>=
    ORG     $887C
GET_SCREEN_ROW_OFFSET_IN_X_FOR:
    SUBROUTINE
    ; Enter routine with X set to offset+2 (in double-pixels) and
    ; Y set to sprite row. On return, X will retain its value and
    ; Y will be set to the screen row.

    TXA
    PHA
    JSR     GET_SCREEN_COORDS_FOR
    PLA
    TAX                                 ; Restore X
    TYA
    CLC
    ADC     ROW_OFFSET_TABLE,X
    TAY
    RTS
@ %def GET_SCREEN_ROW_OFFSET_IN_X_FOR

<<tables>>=
    ORG     $889D
COL_OFFSET_TABLE:
    HEX     FE FF 00 01 02
@ %def COL_OFFSET_TABLE

<<routines>>=
    ORG     $888F
GET_HALF_SCREEN_COL_OFFSET_IN_Y_FOR:
    SUBROUTINE
    ; Enter routine with Y set to offset+2 (in double-pixels) and
    ; X set to sprite column. On return, Y will retain its value and
    ; X will be set to the half screen column.

    TYA
    PHA
    JSR     GET_SCREEN_COORDS_FOR
    PLA
    TAY                                 ; Restore Y
    TXA
    CLC
    ADC     COL_OFFSET_TABLE,Y
    TAX
    RTS
@ %def GET_HALF_SCREEN_COL_OFFSET_IN_Y_FOR

Now we can finally write the routines that draw a sprite on the screen. We have one
routine that draws a sprite at a given game row and game column.
There are two entry points, one to draw on HGR1, and one for HGR2.

<<defines>>=
ROWNUM          EQU     $1B
COLNUM          EQU     $1C
MASK0           EQU     $50
MASK1           EQU     $51
COL_SHIFT_AMT   EQU     $71
GAME_COLNUM     EQU     $85
GAME_ROWNUM     EQU     $86
@ %def ROWNUM COLNUM MASK0 MASK1 COL_SHIFT_AMT GAME_COLNUM GAME_ROWNUM

<<tables>>=
    ORG     $8328
PIXEL_MASK0:
    BYTE    %00000000
    BYTE    %00000001
    BYTE    %00000011
    BYTE    %00000111
    BYTE    %00001111
    BYTE    %00011111
    BYTE    %00111111
PIXEL_MASK1:
    BYTE    %11111000
    BYTE    %11110000
    BYTE    %11100000
    BYTE    %11000000
    BYTE    %10000000
    BYTE    %11111110
    BYTE    %11111100
@ %def PIXEL_MASK0 PIXEL_MASK1

<<routines>>=
    ORG     $82AA
DRAW_SPRITE_PAGE1:
    SUBROUTINE
    ; Enter routine with A set to sprite number to draw,
    ; GAME_ROWNUM set to the row to draw it at, and GAME_COLNUM
    ; set to the column to draw it at.

    STA     SPRITE_NUM
    LDA     #$20                ; Page number for HGR1
    BNE     DRAW_SPRITE         ; Actually unconditional jump

DRAW_SPRITE_PAGE2:
    SUBROUTINE
    ; Enter routine with A set to sprite number to draw,
    ; GAME_ROWNUM set to the row to draw it at, and GAME_COLNUM
    ; set to the column to draw it at.

    STA     SPRITE_NUM
    LDA     #$40                ; Page number for HGR2
    ; fallthrough

DRAW_SPRITE:
    STA     HGR_PAGE
    LDY     GAME_ROWNUM
    JSR     GET_SCREEN_COORDS_FOR
    STY     ROWNUM              ; ROWNUM = SCREEN_ROW_TABLE[GAME_ROWNUM]

    LDX     GAME_COLNUM
    JSR     GET_BYTE_AND_SHIFT_FOR_COL
    STA     COLNUM              ; COLNUM = COL_BYTE_TABLE[GAME_COLNUM]
    STX     COL_SHIFT_AMT       ; COL_SHIFT_AMT = COL_SHIFT_TABLE[GAME_COLNUM]

    LDA     PIXEL_MASK0,X 
    STA     MASK0               ; MASK0 = PIXEL_MASK0[COL_SHIFT_AMT]
    LDA     PIXEL_MASK1,X 
    STA     MASK1               ; MASK1 = PIXEL_MASK1[COL_SHIFT_AMT]

    JSR     COMPUTE_SHIFTED_SPRITE

    LDA     #$0B
    STA     ROW_COUNT
    LDX     #$00
    LDA     COL_SHIFT_AMT
    CMP     #$05
    BCS     .need_3_bytes       ; If COL_SHIFT_AMT >= 5, we need to alter three screen bytes,
                                ; otherwise just two bytes.

.loop1:
    LDY     ROWNUM
    JSR     ROW_TO_ADDR
    LDY     COLNUM
    LDA     (ROW_ADDR),Y 
    AND     MASK0
    ORA     BLOCK_DATA,X 
    STA     (ROW_ADDR),Y        ; screen[COLNUM] = screen[COLNUM] & MASK0 | BLOCK_DATA[i]

    INX                         ; X++
    INY                         ; Y++
    LDA     (ROW_ADDR),Y 
    AND     MASK1
    ORA     BLOCK_DATA,X 
    STA     (ROW_ADDR),Y        ; screen[COLNUM+1] = screen[COLNUM+1] & MASK1 | BLOCK_DATA[i+1]

    INX
    INX                         ; X += 2
    INC     ROWNUM              ; ROWNUM++
    DEC     ROW_COUNT           ; ROW_COUNT--
    BNE     .loop1              ; loop while ROW_COUNT > 0
    RTS

.need_3_bytes
    LDY     ROWNUM
    JSR     ROW_TO_ADDR
    LDY     COLNUM
    LDA     (ROW_ADDR),Y 
    AND     MASK0
    ORA     BLOCK_DATA,X 
    STA     (ROW_ADDR),Y        ; screen[COLNUM] = screen[COLNUM] & MASK0 | BLOCK_DATA[i]

    INX                         ; X++
    INY                         ; Y++
    LDA     BLOCK_DATA,X 
    STA     (ROW_ADDR),Y        ; screen[COLNUM+1] = BLOCK_DATA[i+1]

    INX                         ; X++
    INY                         ; Y++
    LDA     (ROW_ADDR),Y 
    AND     MASK1
    ORA     BLOCK_DATA,X 
    STA     (ROW_ADDR),Y        ; screen[COLNUM+2] = screen[COLNUM+2] & MASK1 | BLOCK_DATA[i+2]

    INX                         ; X++
    INC     ROWNUM              ; ROWNUM++
    DEC     ROW_COUNT           ; ROW_COUNT--
    BNE     .need_3_bytes       ; loop while ROW_COUNT > 0
    RTS
@ %def DRAW_SPRITE_PAGE1 DRAW_SPRITE_PAGE2

There is a different routine which draws a sprite at a given screen coordinate. Upon
entry, the Y register needs to be set to the screen row coordinate (0-191). However, the
X register needs to be set to half the screen column coordinate (0-139) because otherwise
the maximum coordinate (279) wouldn't fit in a register.

<<draw sprite at screen coordinate>>=
    ORG     $8336
DRAW_SPRITE_AT_PIXEL_COORDS:
    SUBROUTINE
    ; Enter routine with A set to sprite number to draw,
    ; Y set to the screen row to draw it at, and X
    ; set to *half* the screen column to draw it at.

    STY     ROWNUM
    STA     SPRITE_NUM
    JSR     GET_BYTE_AND_SHIFT_FOR_HALF_SCREEN_COL
    STA     COLNUM
    STX     COL_SHIFT_AMT
    JSR     COMPUTE_SHIFTED_SPRITE

    LDA     #$0B
    STA     ROW_COUNT
    LDX     #$00
    LDA     COL_SHIFT_AMT
    CMP     #$05
    BCS     .need_3_bytes       ; If COL_SHIFT_AMT >= 5, we need to alter three screen bytes,
                                ; otherwise just two bytes.

.loop1:
    LDY     ROWNUM
    JSR     ROW_TO_ADDR_FOR_BOTH_PAGES
    LDY     COLNUM
    LDA     BLOCK_DATA,X
    EOR     #$7F
    AND     (ROW_ADDR),Y
    ORA     (ROW_ADDR2),Y
    STA     (ROW_ADDR),Y
    INX
    INY
    LDA     BLOCK_DATA+1,X
    EOR     #$7F
    AND     (ROW_ADDR),Y
    ORA     (ROW_ADDR2),Y
    STA     (ROW_ADDR),Y
    INX
    INX
    INC     ROWNUM
    DEC     ROW_COUNT
    BNE     .loop1
    RTS

.need_3_bytes:
    LDY     ROWNUM
    JSR     ROW_TO_ADDR_FOR_BOTH_PAGES
    LDY     COLNUM
    LDA     BLOCK_DATA,X
    EOR     #$7F
    AND     (ROW_ADDR),Y
    ORA     (ROW_ADDR2),Y
    STA     (ROW_ADDR),Y
    INX
    INY
    LDA     BLOCK_DATA+1,X
    EOR     #$7F
    AND     (ROW_ADDR),Y
    ORA     (ROW_ADDR2),Y
    STA     (ROW_ADDR),Y
    INX
    INY
    LDA     BLOCK_DATA+2,X
    EOR     #$7F
    AND     (ROW_ADDR),Y
    ORA     (ROW_ADDR2),Y
    STA     (ROW_ADDR),Y
    INX
    INC     ROWNUM
    DEC     ROW_COUNT
    BNE     .need_3_bytes
    RTS
@ %def DRAW_SPRITE_AT_PIXEL_COORDS

\section{Printing strings}

Now that we can put sprites onto the screen at any game coordinate, we can
also have some routines that print strings. We saw above that we have
letter and number sprites, plus some punctuation. Letters and punctuation
are always blue, while numbers are always orange.

There is a basic routine to put a character at the current [[GAME_COLNUM]]
and [[GAME_ROWNUM]], incrementing this "cursor", and putting it at the beginning
of the next line if we "print" a newline character.

We first define a routine to convert the ASCII code of a character to
its sprite number. Lode Runner sets the high bit of the code to
make it be treated as ASCII.

<<routines>>=
    ORG     $7B2A
CHAR_TO_SPRITE_NUM:
    SUBROUTINE
    ; Enter routine with A set to the ASCII code of the
    ; character to convert to sprite number, with the high bit set.
    ; The sprite number is returned in A.

    CMP     #$C1                    ; 'A' -> sprite 69
    BCC     .not_letter
    CMP     #$DB                    ; 'Z' -> sprite 94
    BCC     .letter

.not_letter:
    ; On return, we will subtract 0x7C from X to
    ; get the actual sprite. This is to make A-Z
    ; easier to handle.
    LDX     #$7C
    CMP     #$A0                    ; ' ' -> sprite 0
    BEQ     .end
    LDX     #$DB
    CMP     #$BE                    ; '>' -> sprite 95
    BEQ     .end
    INX
    CMP     #$AE                    ; '.' -> sprite 96
    BEQ     .end
    INX
    CMP     #$A8                    ; '(' -> sprite 97
    BEQ     .end
    INX
    CMP     #$A9                    ; ')' -> sprite 98
    BEQ     .end
    INX
    CMP     #$AF                    ; '/' -> sprite 99
    BEQ     .end
    INX
    CMP     #$AD                    ; '-' -> sprite 100
    BEQ     .end
    INX
    CMP     #$BC                    ; '<' -> sprite 101
    BEQ     .end
    LDA     #$10                    ; sprite 16: just one of the man sprites
    RTS

.end:
    TXA

.letter:
    SEC
    SBC     #$7C                    
    RTS

@ %def CHAR_TO_SPRITE_NUM

Now we can define the routine to put a character on the screen at the
current position.

<<defines>>=
DRAW_PAGE   EQU     $87     ; 0x20 for page 1, 0x40 for page 2
@ %def DRAW_PAGE

<<routines>>=
    ORG     $7B64
PUT_CHAR:
    SUBROUTINE
    ; Enter routine with A set to the ASCII code of the
    ; character to put on the screen, with the high bit set.

    CMP     #$8D
    BEQ     NEWLINE                 ; If newline, do NEWLINE instead.
    JSR     CHAR_TO_SPRITE_NUM
    LDX     DRAW_PAGE
    CPX     #$40
    BEQ     .draw_to_page2

    JSR     DRAW_SPRITE_PAGE1
    INC     GAME_COLNUM
    RTS

.draw_to_page2
    JSR     DRAW_SPRITE_PAGE2
    INC     GAME_COLNUM
    RTS

NEWLINE:
    SUBROUTINE
    INC     GAME_ROWNUM
    LDA     #$00
    STA     GAME_COLNUM
    RTS
@ %def PUT_CHAR NEWLINE

The [[PUT_STRING]] routine uses [[PUT_CHAR]] to put a string on the screen. Rather than take
an address pointing to a string, instead it uses the return address as the source for data.
It then has to fix up the actual return address at the end to be just after the zero-terminating
byte of the string.

<<defines>>=
    ORG     $10
SAVED_RET_ADDR      DS.W    1
@ %def SAVED_RET_ADDR

<<routines>>=
    ORG     $86E0
PUT_STRING:
    SUBROUTINE

    PLA
    STA     SAVED_RET_ADDR
    PLA
    STA     SAVED_RET_ADDR+1
    BNE     .next

.loop:
    LDY     #$00
    LDA     (SAVED_RET_ADDR),Y
    BEQ     .end
    JSR     PUT_CHAR

.next:
    INC     SAVED_RET_ADDR
    BNE     .loop
    INC     SAVED_RET_ADDR+1
    BNE     .loop

.end:
    LDA     SAVED_RET_ADDR+1
    PHA
    LDA     SAVED_RET_ADDR
    PHA
    RTS
@ %def PUT_STRING

Like [[PUT_CHAR]], we also have [[PUT_DIGIT]] which draws the sprite corresponding
to digits 0 to 9 at the current position, incrementing the cursor.

<<routines>>=
    ORG     $7B15
PUT_DIGIT:
    SUBROUTINE
    ; Enter routine with A set to the digit to put on the screen.

    CLC
    ADC     #$3B                    ; '0' -> sprite 59, '9' -> sprite 68.
    LDX     DRAW_PAGE
    CPX     #$40
    BEQ     .draw_to_page2
    JSR     DRAW_SPRITE_PAGE1
    INC     GAME_COLNUM
    RTS

.draw_to_page2:
    JSR     DRAW_SPRITE_PAGE2
    INC     GAME_COLNUM
    RTS
@ %def PUT_DIGIT

\section{Numbers}

We also need a way to put numbers on the screen.

First, a routine to convert a one-byte decimal number into hundreds,
tens, and units.

<<defines>>=
    ORG     $C0
HUNDREDS        DS      1
TENS            DS      1
UNITS           DS      1
@ %def HUNDREDS TENS UNITS

<<routines>>=
    ORG     $7AF8
TO_DECIMAL3:
    SUBROUTINE
    ; Enter routine with A set to the number to convert.

    LDX     #$00
    STX     TENS
    STX     HUNDREDS

.loop1:
    CMP     100
    BCC     .loop2
    INC     HUNDREDS
    SBC     100
    BNE     .loop1

.loop2:
    CMP     10
    BCC     .end
    INC     TENS
    SBC     10
    BNE     .loop2

.end:
    STA     UNITS
    RTS
@ %def TO_DECIMAL3

There's also a routine to convert a BCD byte to tens and units.

<<routines>>=
    ORG     $7AE9
BCD_TO_DECIMAL2:
    SUBROUTINE
    ; Enter routine with A set to the BCD number to convert.

    STA     TENS
    AND     #$0F
    STA     UNITS
    LDA     TENS
    LSR
    LSR
    LSR
    LSR
    STA     TENS
    RTS
@ %def BCD_TO_DECIMAL2

\section{Score and status}

Lode Runner stores your score as an 8-digit BCD number.

<<defines>>=
    ORG     $8D
SCORE       DS      4       ; BCD format, tens/units in first byte.
@ %def SCORE

The score is always put on the screen at row 16 column 5, but
only the last 7 digits. Row 16 is the status line, as can be
seen at the bottom of this screenshot.

\begin{center}
\includegraphics[width=\columnwidth]{screen}
\end{center}

There's a routine to add a 4-digit BCD
number to the score and then update it on the screen.

<<routines>>=
    ORG     $7A92
ADD_AND_UPDATE_SCORE:
    SUBROUTINE
    ; Enter routine with A set to BCD tens/units and
    ; Y set to BCD thousands/hundreds.

    CLC
    SED                         ; Turn on BCD addition mode.
    ADC     SCORE
    STA     SCORE
    TYA
    ADC     SCORE+1
    STA     SCORE+1
    LDA     #$00
    ADC     SCORE+2
    STA     SCORE+2
    LDA     #$00
    ADC     SCORE+3
    STA     SCORE+3             ; SCORE += param
    CLD                         ; Turn off BCD addition mode.

    LDA     5
    STA     GAME_COLNUM
    LDA     16
    STA     GAME_ROWNUM

    LDA     SCORE+3
    JSR     BCD_TO_DECIMAL2
    LDA     UNITS               ; Note we skipped TENS.
    JSR     PUT_DIGIT

    LDA     SCORE+2
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT

    LDA     SCORE+1
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT

    LDA     SCORE
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JMP     PUT_DIGIT           ; tail call

@ %def ADD_AND_UPDATE_SCORE

The other elements in the status line are the number of men
(i.e. lives) and the current level.

<<defines>>=
    ORG     $A6
LEVELNUM    DS      1
    ORG     $C8
LIVES       DS      1
@ %def LEVELNUM LIVES

Here are the routines to put the lives and level number on
the status line. Lives starts at column 16, and level number
starts at column 25.

<<routines>>=
    ORG     $7a70
PUT_STATUS_LIVES:
    SUBROUTINE

    LDA     LIVES
    LDX     16
    ; fallthrough

PUT_STATUS_BYTE:
    SUBROUTINE
    ; Puts the number in A as a three-digit decimal on the screen
    ; at row 16, column X.

    STX     GAME_COLNUM
    JSR     TO_DECIMAL3
    LDA     16
    STA     GAME_ROWNUM
    LDA     HUNDREDS
    JSR     PUT_DIGIT
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JMP     PUT_DIGIT           ; tail call

PUT_STATUS_LEVEL:
    SUBROUTINE

    LDA     LEVELNUM
    LDX     25
    BNE     PUT_STATUS_BYTE     ; Unconditional jump

@ %def PUT_STATUS_LIVES PUT_STATUS_LEVEL

\chapter{Sound}

\section{Sound "strings"}

A sound "string" describes a sound to play in terms of pitch and duration, ending in a [[00]].
Just like in the [[PUT_STRING]] routine, rather than take
an address pointing to a sound string, instead it uses the return address as the source for data.
It then has to fix up the actual return address at the end to be just after the zero-terminating
byte of the string.

Because [[NOTE_INDEX]] is not zeroed out, this actually appends to the sound data buffer.

The format of a sound string is duration, followed by pitch, although the pitch is lower for higher numbers.

One example of a sound string is [[07 45 06 55 05 44 04 54 03 43 02 53]], found in [[CHECK_FOR_GOLD_PICKED_UP_BY_PLAYER]].


<<defines>>=
NOTE_INDEX      EQU     $54
SOUND_DURATION  EQU     $0E00       ; 128 bytes
SOUND_PITCH     EQU     $0E80       ; 128 bytes
@ %def NOTE_INDEX SOUND_DURATION SOUND_PITCH

<<load sound data>>=
    ORG     $87E1
LOAD_SOUND_DATA:
    SUBROUTINE

    PLA
    STA     SAVED_RET_ADDR
    PLA
    STA     SAVED_RET_ADDR+1
    BNE     .next

.loop:
    LDY     #$00
    LDA     (SAVED_RET_ADDR),Y
    BEQ     .end
    INC     NOTE_INDEX
    LDX     NOTE_INDEX
    STA     SOUND_DURATION,X
    INY
    LDA     (SAVED_RET_ADDR),Y
    STA     SOUND_PITCH,X

    INC     SAVED_RET_ADDR
    BNE     .next
    INC     SAVED_RET_ADDR+1

.next:
    INC     SAVED_RET_ADDR
    BNE     .loop
    INC     SAVED_RET_ADDR+1
    BNE     .loop

.end:
    LDA     SAVED_RET_ADDR+1
    PHA
    LDA     SAVED_RET_ADDR
    PHA
    RTS
@ %def LOAD_SOUND_DATA

\section{Playing notes}

The [[PLAY_NOTE]] routines plays a note through the built-in speaker. The time the note is played is
based on X and Y forming a 16-bit counter (X being the most significant byte), but A controls the pitch,
which is how often the speaker is clicked. The higher A, the lower the pitch.

The [[ENABLE_SOUND]] location can also disable playing the note, but the routine still takes as long as it would have.

<<defines>>=
ENABLE_SOUND    EQU     $99     ; If 0, do not click speaker.
SPKR            EQU     $C030   ; Access clicks the speaker.
@ %def ENABLE_SOUND SPKR

<<play note>>=
    ORG     $87BA
PLAY_NOTE:
    SUBROUTINE

    STA     TMP_PTR
    STX     TMP_PTR+1

.loop:
    LDA     ENABLE_SOUND
    BEQ     .decrement_counter
    LDA     SPKR

.decrement_counter:
    DEY
    BNE     .counter_decremented
    DEC     TMP_PTR+1
    BEQ     .end

.counter_decremented:
    DEX
    BNE     .decrement_counter
    LDX     TMP_PTR
    JMP     .loop

.end:
    RTS
@ %def PLAY_NOTE

\section{Playing a sound}

The [[SOUND_DELAY]] routine delays an amount of time based on the X register. The total number of cycles is about 905 per each X.
Since the Apple //e clock cycle was 980 nsec (on an NTSC system), this routine would delay approximately 887 microseconds times X.
PAL systems were very slightly slower (by $0.47\%$), which corresponds to 883 microseconds times X.

<<sound delay>>=
    ORG     $86B5
SOUND_DELAY:
    SUBROUTINE

    LDY     #$B4        ; 180
.loop:
    DEY                 ; 2 cycles
    BNE     .loop       ; 3 cycles
    DEX                 ; 2 cycles
    BNE     .loop       ; 3 cycles
    RTS
@ %def SOUND_DELAY

Finally, the [[PLAY_SOUND]] routine plays one section of the sound string stored in the [[SOUND_PITCH]]
and [[SOUND_DURATION]] buffers. We have to break up the playing of the sound so that gameplay doesn't
pause while playing the sound, although game play does pause while playing the note.

Alternatively, if there is no sound string, we can play the note stored in location [[\$A4]] as long as
location [[\$9B]] is zero. The duration is [[2 + SOUND_PERIOD]].

The routine is designed to delay approximately the same amount regardless of sound duration. The
delay is controlled by [[SOUND_PERIOD]]. This value is hardcoded to [[6]].

<<defines>>=
    ORG     $8C
SOUND_PERIOD:
    HEX     06
@ %def SOUND_PERIOD

<<play sound>>=
    ORG     $8811
PLAY_SOUND:
    SUBROUTINE

    LDY     NOTE_INDEX
    BEQ     .no_more_notes
    LDA     SOUND_PITCH,Y
    LDX     SOUND_DURATION,Y
    JSR     PLAY_NOTE

    LDY     NOTE_INDEX              ; Y = NOTE_INDEX
    DEC     NOTE_INDEX              ; NOTE_INDEX--
    LDA     SOUND_PERIOD
    SEC
    SBC     SOUND_DURATION,Y        ; A = SOUND_PERIOD - SOUND_DURATION[Y]
    BEQ     .done
    BCC     .done                   ; If A <= 0, done.
    TAX
    JSR     SOUND_DELAY

.done:
    SEC
    RTS

.no_more_notes:
    LDA     $9B
    BNE     .end
    LDA     $A4
    LSR                     ; pitch = $A4 >> 1
    INC     $A4             ; $A4++
    LDX     SOUND_PERIOD
    INX
    INX                     ; duration = SOUND_PERIOD + 2
    JSR     PLAY_NOTE

    CLC
    RTS

.end:
    LDX     SOUND_PERIOD
    JSR     SOUND_DELAY

    CLC
    RTS
@ %def PLAY_SOUND

\chapter{Levels}

One of the appealing things about Lode Runner are its levels. 150 levels are stored
in the game, and there is even a level editor included.

\section{Drawing a level}

Let's see how Lode Runner draws a level. We start with the routine [[DRAW_LEVEL_PAGE2]],
which draws a level on HGR2. Note that HGR1 would be displayed, so the player doesn't
see the draw happening.

We start by looping backwards over rows 15 through 0:

<<level draw routine>>=
    ORG     $63B3
DRAW_LEVEL_PAGE2:
    SUBROUTINE
    ; Returns carry set if there was no player sprite in the level,
    ; or carry clear if there was.

    LDY     15
    STY     GAME_ROWNUM

.row_loop:
@ %def DRAW_LEVEL_PAGE2

We'll assume the level data is stored in
a table which contains 16 pointers, one for each row. As usual in Lode Runner,
the pages and offsets for those pointers are stored in separate tables. these
are [[CURR_LEVEL_ROW_SPRITES_PTR_PAGES]] and [[CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS]].

<<tables>>=
    ORG     $1C05
CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS:
    HEX     00 1C 38 54 70 8C A8 C4 E0 FC 18 34 50 6C 88 A4
CURR_LEVEL_ROW_SPRITES_PTR_PAGES:
    HEX     08 08 08 08 08 08 08 08 08 08 09 09 09 09 09 09
CURR_LEVEL_ROW_SPRITES_PTR_PAGES2:
    HEX     0A 0A 0A 0A 0A 0A 0A 0A 0A 0A 0B 0B 0B 0B 0B 0B
@ %def CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS CURR_LEVEL_ROW_SPRITES_PTR_PAGES CURR_LEVEL_ROW_SPRITES_PTR_PAGES2

At the beginning of this loop, we create two pointers which we'll simply
call [[PTR1]] and [[PTR2]]. 

<<defines>>=
PTR1        EQU     $06     ; 2 bytes
PTR2        EQU     $08     ; 2 bytes
@ %def PTR1 PTR2

We set [[PTR1]] to the pointer corresponding to the current row, and [[PTR2]] to the other
page, though I don't know what it's for yet.

<<level draw routine>>=
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS,Y
    STA     PTR1
    STA     PTR2
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES,Y
    STA     PTR1+1
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES2,Y
    STA     PTR2+1
@

Next, we loop over the columns backwards from 27 to 0.

<<level draw routine>>=
    LDY     27
    STY     GAME_COLNUM

.col_loop:
@

We load the sprite from the level data.

<<level draw routine>>=
    LDA     (PTR1),Y
@

Now, as we place each sprite, we count the number of each piece we've used so far.
Remember that anyone can create a level, but there are some limitations. Specifically,
we are limited to 45 ladders, one player, and 5 guards. We store the counts
as we go.

We'll assume that these values are zeroed before the [[DRAW_LEVEL_PAGE2]] routine is called.

<<defines>>=
    ORG     $00
PLAYER_COL      DS      1       ; The column number of the player.
PLAYER_ROW      DS      1       ; The row number of the player.
    ORG     $8D
GUARD_COUNT     DS      1
    ORG     $93
GOLD_COUNT      DS      1
    ORG     $A3
LADDER_COUNT    DS      1
@ %def PLAYER_COL PLAYER_ROW GUARD_COUNT GOLD_COUNT LADDER_COUNT

However, there's a flag called [[VERBATIM]] that tells us whether we want to ignore
these counts and just draw the level as specified. Possibly when we're using the
level editor.

<<defines>>=
    ORG     $A2
VERBATIM        DS      1
@ %def VERBATIM

<<level draw routine>>=
    LDX     VERBATIM
    BEQ     .draw_sprite1       ; This will then unconditionally jump to
                                ; .draw_sprite2. We have to do that because of
                                ; relative jump amount limitations.
@

Next we handle sprite 6, which is a symbol used to denote ladder placement. If we've already
got the maximum number of ladders, we just put in a space instead. For each ladder placed, we
write the [[LADDER_LOCS]] table with its coordinates.

<<tables>>=
    ORG     $0C00
LADDER_LOCS_COL     DS      48
LADDER_LOCS_ROW     DS      48
@ %def LADDER_LOCS_COL LADDER_LOCS_ROW

<<level draw routine>>=
    CMP      #$06
    BNE     .check_for_box

    LDX     LADDER_COUNT
    CPX     45
    BCS     .remove_sprite

    INC     LADDER_COUNT
    INX
    LDA     GAME_ROWNUM
    STA     LADDER_LOCS_ROW,X
    TYA
    STA     LADDER_LOCS_COL,X

@

In any case, we remove the sprite from the current level data.

<<level draw routine>>=
.remove_sprite:
    LDA     0
    STA     (PTR1),Y
    STA     (PTR2),Y

.draw_sprite1
    BEQ     .draw_sprite        ; Unconditional jump.
@

Next, we check for sprite 7, the gold box.

<<level draw routine>>=
.check_for_box:
    CMP      #$07
    BNE     .check_for_8

    INC     GOLD_COUNT
    BNE     .draw_sprite        ; This leads to a situation where if we wrap
                                ; GOLD_COUNT around back to 0 (so 256 boxes)
                                ; we end up falling through, which eventually
                                ; just draws the sprite anyway. So this is kind
                                ; of unconditional.

@

Next, we check for sprite 8, a guard. If we've already
got the maximum number of guards, we just put in a space instead. For each guard placed, we
write the [[GUARD_LOCS]] table with its coordinates. We also write some other guard-related
tables.

<<tables>>=
    ORG     $0C60
GUARD_LOCS_COL      DS      8
GUARD_LOCS_ROW      DS      8
GUARD_FLAGS_0C70    DS      8
GUARD_FLAGS_0C78    DS      8
GUARD_FLAGS_0C80    DS      8
GUARD_FLAGS_0C88    DS      8
@ %def GUARD_LOCS_COL GUARD_LOCS_ROW GUARD_FLAGS_0C70 GUARD_FLAGS_0C78 GUARD_FLAGS_0C80 GUARD_FLAGS_0C88

<<level draw routine>>=
.check_for_8:
    CMP     #$08
    BNE     .check_for_9

    LDX     GUARD_COUNT
    CPX     5
    BCS     .remove_sprite          ; If GUARD_COUNT > 5, remove sprite.

    INC     GUARD_COUNT
    INX
    TYA
    STA     GUARD_LOCS_COL,X
    LDA     GAME_ROWNUM
    STA     GUARD_LOCS_ROW,X
    LDA     #$00
    STA     GUARD_FLAGS_0C70,X
    STA     GUARD_FLAGS_0C88,X
    LDA     #$02
    STA     GUARD_FLAGS_0C78,X
    STA     GUARD_FLAGS_0C80,X

    LDA     #$00
    STA     (PTR2),Y
    LDA     #$08
    BNE     .draw_sprite            ; Unconditional jump.

@

Here we insert a few unconditional branches because of relative jump limitations.

<<level draw routine>>=
.next_row:
    BPL     .row_loop
.next_col:
    BPL     .col_loop
@

Next we check for sprite 9, the player.

<<defines>>=
PLAYER_X_ADJ                EQU     $02     ; [0-4] minus 2 (so 2 = right on the sprite location)
PLAYER_Y_ADJ                EQU     $03     ; [0-4] minus 2 (so 2 = right on the sprite location)
PLAYER_ANIM_STATE           EQU     $04     ; Index into SPRITE_ANIM_SEQS
PLAYER_FACING_DIRECTION     EQU     $05     ; Hi bit set: facing left, otherwise facing right
@ %def PLAYER_X_ADJ PLAYER_Y_ADJ PLAYER_ANIM_STATE

<<level draw routine>>=
.check_for_9:
    CMP     #$09
    BNE     .check_for_5

    LDX     PLAYER_COL
    BPL     .remove_sprite          ; If PLAYER_COL > 0, remove sprite.

    STY     PLAYER_COL
    LDX     GAME_ROWNUM
    STX     PLAYER_ROW
    LDX     #$02
    STX     PLAYER_X_ADJ
    STX     PLAYER_Y_ADJ            ; Set Player X and Y movement to 0.
    LDX     #$08
    STX     PLAYER_ANIM_STATE       ; Corresponds to sprite 9 (see SPRITE_ANIM_SEQS)

    LDA     #$00
    STA     (PTR2),Y
    LDA     #$09
    BNE     .draw_sprite            ; Unconditional jump.
@

Finally, we check for sprite 5, the symbol for a brick, and replace it with a brick. If the
sprite is anything else, we just draw it.

<<level draw routine>>=
.check_for_5:
    CMP     #$05
    BNE     .draw_sprite
    LDA     #$01                    ; Brick sprite
@

We finally draw the sprite, on page 2, and advance the loop.

<<level draw routine>>=
.draw_sprite:
    JSR     DRAW_SPRITE_PAGE2

    DEC     GAME_COLNUM
    LDY     GAME_COLNUM
    BPL     .next_col               ; Jumps to .col_loop

    DEC     GAME_ROWNUM
    LDY     GAME_ROWNUM
    BPL     .next_row               ; Jumps to .row_loop
@

After the loop, in verbatim mode, we copy the entire page 2 into page 1 and return.
Otherwise, if we did place a player sprite, reveal the screen. If we didn't place
a player sprite, that's an error!

<<level draw routine>>=
    LDA     VERBATIM
    BEQ     .copy_page2_to_page1

    LDA     PLAYER_COL
    BPL     .reveal_screen

    SEC                             ; Oops, no player! Return error.
    RTS
@

To copy the page, we'll need that second [[ROW_ADDR2]] pointer.

<<level draw routine>>=
.copy_page2_to_page1:
    LDA     #$20
    STA     ROW_ADDR2+1
    LDA     #$40
    STA     ROW_ADDR+1
    LDA     #$00
    STA     ROW_ADDR2
    STA     ROW_ADDR
    TAY

.copy_loop:
    LDA     (ROW_ADDR),Y
    STA     (ROW_ADDR2),Y
    INY
    BNE     .copy_loop

    INC     ROW_ADDR2+1
    INC     ROW_ADDR+1
    LDX     ROW_ADDR+1
    CPX     #$60
    BCC     .copy_loop

    CLC
    RTS
@

Revealing the screen, using an iris wipe. Then, we remove the guard and player sprites!

<<level draw routine>>=
.reveal_screen
    JSR     IRIS_WIPE

    LDY     15
    STY     GAME_ROWNUM

.row_loop2:
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS,Y
    STA     PTR1
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES,Y
    STA     PTR1+1
    LDY     27
    STY     GAME_COLNUM

.col_loop2:
    LDA     (PTR1),Y
    CMP     #$09
    BEQ     .remove
    CMP     #$08
    BNE     .next

.remove:
    LDA     #$00
    JSR     DRAW_SPRITE_PAGE2

.next:
    DEC     GAME_COLNUM
    LDY     GAME_COLNUM
    BPL     .col_loop2

    DEC     GAME_ROWNUM
    LDY     GAME_ROWNUM
    BPL     .row_loop2

    CLC
    RTS
@

\section{Iris Wipe}

Whenever a level is finished or starts, there's an iris wipe transition. The routine that starts it
off is [[IRIS_WIPE]].

\includegraphics[width=\columnwidth]{iris}

<<defines>>=
WIPE_COUNTER        EQU     $6D
WIPE_MODE           EQU     $A5     ; 0 for open, 1 for close.
WIPE_DIR            EQU     $72     ; 0 for close, 1 for open.
WIPE_CENTER_X       EQU     $77
WIPE_CENTER_Y       EQU     $73
@ %def WIPE_COUNTER WIPE_MODE

<<iris wipe>>=
    ORG     $88A2
IRIS_WIPE:
    SUBROUTINE

    LDA     88
    STA     WIPE_CENTER_Y
    LDA     140
    STA     WIPE_CENTER_X

    LDA     WIPE_MODE
    BEQ     .iris_open

    LDX     #$AA
    STX     WIPE_COUNTER
    LDX     #$00
    STX     WIPE_DIR             ; Close

.loop_close:
    JSR     IRIS_WIPE_STEP
    DEC     WIPE_COUNTER
    BNE     .loop_close

.iris_open:
    LDA     #$01
    STA     WIPE_COUNTER
    STA     WIPE_MODE           ; So next time we will close.
    STA     WIPE_DIR            ; Open
    JSR     PUT_STATUS_LIVES
    JSR     PUT_STATUS_LEVEL

.loop_open:
    JSR     IRIS_WIPE_STEP
    INC     WIPE_COUNTER
    LDA     WIPE_COUNTER
    CMP     #$AA
    BNE     .loop_open
    RTS
@ %def IRIS_WIPE

The routine [[IRIS_WIPE_STEP]] does a lot of math to compute the circular iris, all parameterized
on [[WIPE_COUNTER]].

Here is a routine that divides a 16-bit value in A and X (X being LSB) by 7, storing the
result in Y, with remainder in A. The routine effectively does long division. It also uses two temporaries.

<<defines>>=
MATH_TMPL     EQU     $6F
MATH_TMPH     EQU     $70
@ %def MATH_TMPL MATH_TMPH

<<routines>>=
    ORG     $8A45
DIV_BY_7:
    SUBROUTINE
    ; Enter routine with AX set to (unsigned) numerator.
    ; On exit, Y will contain the integer portion of AX/7,
    ; and A contains the remainder.

    STX     MATH_TMPL
    LDY     8
    SEC
    SBC     7

.loop:
    PHP
    ROL     MATH_TMPH
    ASL     MATH_TMPL
    ROL
    PLP
    BCC     .adjust_up
    SBC     7
    JMP     .next

.adjust_up
    ADC     7

.next
    DEY
    BNE     .loop

    BCS     .no_adjust
    ADC     7
    CLC

.no_adjust
    ROL     MATH_TMPH
    LDY     MATH_TMPH
    RTS
@ %def DIV_BY_7

Now, for one iris wipe step, we will need lots and lots of temporaries.

<<defines>>=
WIPE0       EQU     $69     ; 16-bit value
WIPE1       EQU     $67     ; 16-bit value
WIPE2       EQU     $6B     ; 16-bit value
WIPE3L      EQU     $75
WIPE4L      EQU     $76
WIPE5L      EQU     $77
WIPE6L      EQU     $78
WIPE3H      EQU     $79
WIPE4H      EQU     $7A
WIPE5H      EQU     $7B
WIPE6H      EQU     $7C
WIPE7D      EQU     $7D     ; Dividends
WIPE8D      EQU     $7E
WIPE9D      EQU     $7F
WIPE10D     EQU     $80
WIPE7R      EQU     $81     ; Remainders
WIPE8R      EQU     $82
WIPE9R      EQU     $83
WIPE10R     EQU     $84
@ %def WIPE0 WIPE1 WIPE2 WIPE3L WIPE3H WIPE4L WIPE4H WIPE5L WIPE5H WIPE6L WIPE6H WIPE7D WIPE7R WIPE8D WIPE8R WIPE9D WIPE9R WIPE10D WIPE10R

The first thing we do for a single step is initialize all those variables!

<<iris wipe step>>=
    ORG     $88D7
IRIS_WIPE_STEP:
    SUBROUTINE

<<[[WIPE0 = WIPE_COUNTER]]>>
<<[[WIPE1 = 0]]>>
<<[[WIPE2 = 2 * WIPE0]]>>
<<[[WIPE2 = 3 - WIPE2]]>>

; WIPE3, WIPE4, WIPE5, and WIPE6 correspond to
; row numbers. WIPE3 is above the center, WIPE6
; is below the center, while WIPE4 and WIPE5 are on
; the center.

<<[[WIPE3 = WIPE_CENTER_Y - WIPE_COUNTER]]>>
<<[[WIPE4 = WIPE5 = WIPE_CENTER_Y]]>>
<<[[WIPE6 = WIPE_CENTER_Y + WIPE_COUNTER]]>>

; WIPE7, WIPE8, WIPE9, and WIPE10 correspond to
; column byte numbers. Note the division by 7 pixels!
; WIPE7 is left of center, WIPE10 is right of center,
; while WIPE8 and WIPE9 are on the center.

<<[[WIPE7 = (WIPE_CENTER_X - WIPE_COUNTER) / 7]]>>
<<[[WIPE8 = WIPE9 = WIPE_CENTER_X / 7]]>>
<<[[WIPE10 = (WIPE_CENTER_X + WIPE_COUNTER) / 7]]>>
@ %def IRIS_WIPE_STEP

Now we loop. This involves checking [[WIPE1]] against [[WIPE0]]:

\begin{itemize}
  \item If [[WIPE1]] $<$ [[WIPE0]], return.
  \item If [[WIPE1]] == [[WIPE0]], go to [[DRAW_WIPE_STEP]] then return.
  \item Otherwise, call [[DRAW_WIPE_STEP]] and go round the loop.
\end{itemize}

Going around the loop involves calling [[DRAW_WIPE_STEP]], then adjusting
the numbers.

<<iris wipe step>>=
.loop:

<<iris wipe loop check>>

    JSR     DRAW_WIPE_STEP

    LDA     WIPE2+1
    BPL     .89a7

<<[[WIPE2 += 4 * WIPE1 + 6]]>>
    JMP     .8a14

.89a7:

<<[[WIPE2 += 4 * (WIPE1 - WIPE0) + 16]]>>
<<Decrement [[WIPE0]]>>
<<Increment [[WIPE3]]>>
<<Decrement [[WIPE10]] modulo 7>>
<<Increment [[WIPE7]] modulo 7>>
<<Decrement [[WIPE6]]>>

.8a14:

<<Increment [[WIPE1]]>>
<<Increment [[WIPE9]] modulo 7>>
<<Decrement [[WIPE4]]>>
<<Increment [[WIPE5]]>>
<<Decrement [[WIPE8]] modulo 7>>
    JMP     .loop
@

Drawing a wipe step draws all four parts. There are two rows which move north
and two rows that move south. There are also two left and right offsets, one
short and one long. This makes eight combinations.

<<draw wipe step>>=
    ORG     $8A69
DRAW_WIPE_STEP:
    SUBROUTINE

<<Draw wipe for south part>>
<<Draw wipe for north part>>
<<Draw wipe for north2 part>>
<<Draw wipe for south2 part>>
@ %def DRAW_WIPE_STEP

Each part consists of two halves, right and left (or east and west).

<<Draw wipe for south part>>=
    LDY     WIPE6H
    BNE     .draw_north
    LDY     WIPE6L
    CPY     176
    BCS     .draw_north        ; Skip if WIPE6 >= 176

    JSR     ROW_TO_ADDR_FOR_BOTH_PAGES

    ; East side
    LDY     WIPE9D
    CPY     40
    BCS     .draw_south_west
    LDX     WIPE9R
    JSR     DRAW_WIPE_BLOCK

.draw_south_west
    ; West side
    LDY     WIPE8D
    CPY     40
    BCS     .draw_north
    LDX     WIPE9R
    JSR     DRAW_WIPE_BLOCK
@

<<Draw wipe for north part>>=
.draw_north:
    LDY     WIPE3H
    BNE     .draw_north2
    LDY     WIPE3L
    CPY     176
    BCS     .draw_north2        ; Skip if WIPE3 >= 176

    JSR     ROW_TO_ADDR_FOR_BOTH_PAGES

    ; East side
    LDY     WIPE9D
    CPY     40
    BCS     .draw_north_west
    LDX     WIPE9R
    JSR     DRAW_WIPE_BLOCK

.draw_north_west
    ; West side
    LDY     WIPE8D
    CPY     40
    BCS     .draw_north2
    LDX     WIPE9R
    JSR     DRAW_WIPE_BLOCK
@

<<Draw wipe for north2 part>>=
.draw_north2:
    LDY     WIPE5H
    BNE     .draw_south2
    LDY     WIPE5L
    CPY     176
    BCS     .draw_south2        ; Skip if WIPE5 >= 176

    JSR     ROW_TO_ADDR_FOR_BOTH_PAGES

    ; East side
    LDY     WIPE10D
    CPY     40
    BCS     .draw_north2_west
    LDX     WIPE10R
    JSR     DRAW_WIPE_BLOCK

.draw_north2_west
    ; West side
    LDY     WIPE7D
    CPY     40
    BCS     .draw_south2
    LDX     WIPE7R
    JSR     DRAW_WIPE_BLOCK
@

<<Draw wipe for south2 part>>=
.draw_south2:
    LDY     WIPE4H
    BNE     .end
    LDY     WIPE4L
    CPY     176
    BCS     .end        ; Skip if WIPE4 >= 176

    JSR     ROW_TO_ADDR_FOR_BOTH_PAGES

    ; East side
    LDY     WIPE10D
    CPY     40
    BCS     .draw_south2_west
    LDX     WIPE10R
    JSR     DRAW_WIPE_BLOCK

.draw_south2_west
    ; West side
    LDY     WIPE7D
    CPY     40
    BCS     .draw_south2
    LDX     WIPE7R
    JMP     DRAW_WIPE_BLOCK           ; tail call

.end:
    RTS
@

Drawing a wipe block depends on whether we're opening or closing on the level.
Closing on the level just blacks out pixels on page 1. Opening on the level
copies some pixels from page 2 into page 1.

<<draw wipe block>>=
    ORG     $8AF6
DRAW_WIPE_BLOCK:
    SUBROUTINE
    ; Enter routine with X set to the column byte and Y set to
    ; the pixel number within that byte (0-6). ROW_ADDR and
    ; ROW_ADDR2 must contain the base row address for page 1
    ; and page 2, respectively.

    LDA     WIPE_DIR
    BNE     .open
    LDA     (ROW_ADDR),Y
    AND     WIPE_BLOCK_CLOSE_MASK,X
    STA     (ROW_ADDR),Y

.open:
    LDA     (ROW_ADDR2),Y
    AND     WIPE_BLOCK_OPEN_MASK,X
    ORA     (ROW_ADDR),Y
    STA     (ROW_ADDR),Y
    RTS
@ %def DRAW_WIPE_BLOCK

<<tables>>=
    ORG     $8B0C
WIPE_BLOCK_CLOSE_MASK:
    BYTE     %11110000
    BYTE     %11110000
    BYTE     %11110000
    BYTE     %11110000
    BYTE     %10001111
    BYTE     %10001111
    BYTE     %10001111
WIPE_BLOCK_OPEN_MASK:
    BYTE     %10001111
    BYTE     %10001111
    BYTE     %10001111
    BYTE     %10001111
    BYTE     %11110000
    BYTE     %11110000
    BYTE     %11110000
@ %def WIPE_BLOCK_CLOSE_MASK WIPE_BLOCK_OPEN_MASK

<<iris wipe loop check>>=
    LDA     WIPE1+1
    CMP     WIPE0+1
    BCC     .draw_wipe_step ; Effectively, if WIPE1 > WIPE0, jump to .draw_wipe_step.
    BEQ     .8969           ; Otherwise jump to .loop1, which...

.loop1:
    LDA     WIPE1
    CMP     WIPE0
    BNE     .end
    LDA     WIPE1+1
    CMP     WIPE0+1
    BNE     .end            ; If WIPE0 != WIPE1, return.
    JMP     DRAW_WIPE_STEP

.end:
    RTS

.8969:
    LDA     WIPE1
    CMP     WIPE0
    BCS     .loop1          ; The other half of the comparison from .loop.

.draw_wipe_step:
@

\subsection{Initialization}

<<[[WIPE0 = WIPE_COUNTER]]>>=
    LDA     WIPE_COUNTER
    STA     WIPE0
    LDA     #$00
    STA     WIPE0+1         ; WIPE0 = WIPE_COUNTER
@

<<[[WIPE1 = 0]]>>=
    ; fallthrough with A = 0
    STA     WIPE1
    STA     WIPE1+1         ; WIPE1 = 0
@

<<[[WIPE2 = 2 * WIPE0]]>>=
    LDA     WIPE0
    ASL
    STA     WIPE2
    LDA     WIPE0+1
    ROL
    STA     WIPE2+1         ; WIPE2 = 2 * WIPE0
@

<<[[WIPE2 = 3 - WIPE2]]>>=
    LDA     #$03
    SEC
    SBC     WIPE2
    STA     WIPE2
    LDA     #$00
    SBC     WIPE2+1
    STA     WIPE2+1         ; WIPE2 = 3 - WIPE2
@

<<[[WIPE3 = WIPE_CENTER_Y - WIPE_COUNTER]]>>=
    LDA     WIPE_CENTER_Y
    SEC
    SBC     WIPE_COUNTER
    STA     WIPE3L
    LDA     #$00
    SBC     #$00
    STA     WIPE3H          ; WIPE3 = WIPE_CENTER_Y - WIPE_COUNTER
@

<<[[WIPE4 = WIPE5 = WIPE_CENTER_Y]]>>=
    LDA     WIPE_CENTER_Y
    STA     WIPE4L
    STA     WIPE5L
    LDA     #$00
    STA     WIPE4H
    STA     WIPE5H          ; WIPE4 = WIPE5 = WIPE_CENTER_Y
@

<<[[WIPE6 = WIPE_CENTER_Y + WIPE_COUNTER]]>>=
    LDA     WIPE_CENTER_Y
    CLC
    ADC     WIPE_COUNTER
    STA     WIPE6L
    LDA     #$00
    ADC     #$00
    STA     WIPE6H          ; WIPE6 = WIPE_CENTER_Y + WIPE_COUNTER
@

<<[[WIPE7 = (WIPE_CENTER_X - WIPE_COUNTER) / 7]]>>=
    LDA     WIPE_CENTER_X
    SEC
    SBC     WIPE_COUNTER
    TAX
    LDA     #$00
    SBC     #$00
    JSR     DIV_BY_7
    STY     WIPE7D
    STA     WIPE7R          ; WIPE7 = (WIPE_CENTER_X - WIPE_COUNTER) / 7
@

<<[[WIPE8 = WIPE9 = WIPE_CENTER_X / 7]]>>=
    LDX     WIPE_CENTER_X
    LDA     #$00
    JSR     DIV_BY_7
    STY     WIPE8D
    STY     WIPE9D
    STA     WIPE8R
    STA     WIPE9R          ; WIPE8 = WIPE9 = WIPE_CENTER_X / 7
@

<<[[WIPE10 = (WIPE_CENTER_X + WIPE_COUNTER) / 7]]>>=
    LDA     WIPE_CENTER_X
    CLC
    ADC     WIPE_COUNTER
    TAX
    LDA     #$00
    ADC     #$00
    JSR     DIV_BY_7
    STY     WIPE10D
    STA     WIPE10R         ; WIPE10 = (WIPE_CENTER_X + WIPE_COUNTER) / 7
@

\subsection{All that math stuff}

<<[[WIPE2 += 4 * WIPE1 + 6]]>>=
    LDA     WIPE1
    ASL
    STA     MATH_TMPL
    LDA     WIPE1+1
    ROL
    STA     MATH_TMPH       ; MATH_TMP = WIPE1 * 2

    LDA     MATH_TMPL
    ASL
    STA     MATH_TMPL
    LDA     MATH_TMPH
    ROL
    STA     MATH_TMPH       ; MATH_TMP *= 2

    LDA     WIPE2
    CLC
    ADC     MATH_TMPL
    STA     MATH_TMPL
    LDA     WIPE2+1
    ADC     MATH_TMPH
    STA     MATH_TMPH       ; MATH_TMP += WIPE2

    LDA     #$06
    CLC
    ADC     MATH_TMPL
    STA     WIPE2
    LDA     #$00
    ADC     MATH_TMPH
    STA     WIPE2+1        ; WIPE2 = MATH_TMP + 6
@

<<[[WIPE2 += 4 * (WIPE1 - WIPE0) + 16]]>>=
    LDA     WIPE1
    SEC
    SBC     WIPE0
    STA     MATH_TMPL
    LDA     WIPE1+1
    SBC     WIPE0+1
    STA     MATH_TMPH       ; MATH_TMP = WIPE1 - WIPE0

    LDA     MATH_TMPL
    ASL
    STA     MATH_TMPL
    LDA     MATH_TMPH
    ROL
    STA     MATH_TMPH       ; MATH_TMP *= 2

    LDA     MATH_TMPL
    ASL
    STA     MATH_TMPL
    LDA     MATH_TMPH
    ROL
    STA     MATH_TMPH       ; MATH_TMP *= 2

    LDA     MATH_TMPL
    CLC
    ADC     #$10
    STA     MATH_TMPL
    LDA     MATH_TMPH
    ADC     #$00
    STA     MATH_TMPH       ; MATH_TMP += 16

    LDA     MATH_TMPL
    CLC
    ADC     WIPE2
    STA     WIPE2
    LDA     MATH_TMPH
    ADC     WIPE2+1
    STA     WIPE2+1        ; WIPE2 += MATH_TMP
@

<<Decrement [[WIPE0]]>>=
    LDA     WIPE0
    PHP
    DEC     WIPE0
    PLP
    BNE     .b9ec
    DEC     WIPE0+1         ; WIPE0--
.b9ec
@

<<Increment [[WIPE3]]>>=
    INC     WIPE3L
    BNE     .89f2
    INC     WIPE3H          ; WIPE3++
.89f2
@

<<Decrement [[WIPE10]] modulo 7>>=
    DEC     WIPE10R
    BPL     .89fc
    LDA     #$06
    STA     WIPE10R
    DEC     WIPE10D
.89fc
@

<<Increment [[WIPE7]] modulo 7>>=
    INC     WIPE7R
    LDA     WIPE7R
    CMP     #$07
    BNE     .8a0a
    LDA     #$00
    STA     WIPE7R
    INC     WIPE7D
.8a0a
@

<<Decrement [[WIPE6]]>>=
    DEC     WIPE6L
    LDA     WIPE6L
    CMP     #$FF
    BNE     .8a14
    DEC     WIPE6H
@

<<Increment [[WIPE1]]>>=
    INC     WIPE1
    BNE     .8a1a
    INC     WIPE1+1          ; WIPE1++
.8a1a
@

<<Increment [[WIPE9]] modulo 7>>=
    INC     WIPE9R
    LDA     WIPE9R
    CMP     #$07
    BNE     .8a28
    LDA     #$00
    STA     WIPE9R
    INC     WIPE9D
.8a28
@

<<Decrement [[WIPE4]]>>=
    DEC     WIPE4L
    LDA     WIPE4L
    CMP     #$FF
    BNE     .8a32
    DEC     WIPE4H
.8a32
@

<<Increment [[WIPE5]]>>=
    INC     WIPE5L
    BNE     .8a38
    INC     WIPE5H          ; WIPE5++
.8a38
@

<<Decrement [[WIPE8]] modulo 7>>=
    DEC     WIPE8R
    BPL     .8a42
    LDA     #$06
    STA     WIPE8R
    DEC     WIPE8D
.8a42
@

\section{Level data}

Now that we have the ability to draw a level from level data, we need a routine
to get that level data. Recall that level data needs to be stored in pointers
specified in the [[CURR_LEVEL_ROW_SPRITES_PTR_]] tables.

\subsection{Getting the compressed level data}

The level data is stored in the game in compressed form, so we first grab
the data for the level and put it into the [[COMPRESSED_LEVEL_DATA]] buffer.

There's one switch here, [[PREGAME_MODE]], which dictates whether we're going to
display the high-score screen, attract-mode game play, or an actual level for playing.

<<defines>>=
PREGAME_MODE    EQU     $A7
@ %def PREGAME_MODE

<<load compressed level data>>=
    ORG     $630E
LOAD_COMPRESSED_LEVEL_DATA:
    SUBROUTINE
    ; Enter routine with A set to 1.

    STA     $bf74
    LDA     PREGAME_MODE
    LSR
    BEQ     .copy_level_data        ; If PREGAME_MODE was 0 or 1, copy level data

    LDA     $96
    LSR
    LSR
    LSR
    LSR
    CLC
    ADC     3
    STA     $b7ec       ; = 3 + 16 * $96
    LDA     $96
    AND     #$0F
    STA     $b7ed
    LDA     #$00
    STA     $b7f0
    LDA     #$0D
    STA     $b7f1
    LDA     #$00
    STA     $b7eb
    LDY     #$E8
    LDA     #$B7        ; AY = B7E8

    JSR     $23         ; JMP ($24)
    BCC     .end
    JMP     $6008

.end:
    RTS

.copy_level_data:
<<Copy level data>>
@

We're not really using [[ROW_ADDR]] here as a row address, just as
a convenient place to store a pointer. Also, we can see that
level data is stored in 256-byte pages at [[9F00]], [[A000]], and so on.
Level numbers start from 1, so [[9E00]] doesn't actually contain level data.

<<Copy level data>>=
    <<[[ROW_ADDR = $9E00 + LEVELNUM * $0100]]>>
    <<Copy data from [[ROW_ADDR]] into [[COMPRESSED_LEVEL_DATA]]>>
@

<<[[ROW_ADDR = $9E00 + LEVELNUM * $0100]]>>=
    LDA     LEVELNUM        ; 1-based
    CLC
    ADC     #$9E
    STA     ROW_ADDR+1
    LDY     #$00
    STY     ROW_ADDR        ; ROW_ADDR <- 9E00 + LEVELNUM * 0x100
@

<<Copy data from [[ROW_ADDR]] into [[COMPRESSED_LEVEL_DATA]]>>=
.copyloop:
    LDA     (ROW_ADDR),Y
    STA     COMPRESSED_LEVEL_DATA,Y
    INY
    BNE     .copyloop
    RTS
@

\subsection{Uncompressing and displaying the level}

<<load level>>=
    ORG     $6238
LOAD_LEVEL:
    SUBROUTINE
    ; Enter routine with X set to whether the level should be
    ; loaded verbatim or not.

    STX     VERBATIM

    <<Initialize level counts>>

    LDA     1
    STA     ALIVE
    JSR     LOAD_COMPRESSED_LEVEL_DATA

    <<uncompress level data>>
@ %def LOAD_LEVEL

<<defines>>=
TMP                     EQU     $1A
LEVEL_DATA_INDEX        EQU     $92
@

<<tables>>=
    ORG     $0C98
TABLE_0C98      DS      6
    ORG     $0CE0
TABLE_0CE0      DS      31
@

Here we are initializing variables in preparation for loading the level data.
Since drawing the level will keep track of ladder, gold, and guard count, we
need to zero them out. There are also some areas of memory whose purpose is
not yet known, and these are zeroed out also.

<<Initialize level counts>>=
    LDX     #$FF
    STX     PLAYER_COL
    INX
    STX     LADDER_COUNT
    STX     GOLD_COUNT
    STX     GUARD_COUNT
    STX     $19
    STX     $A0
    STX     LEVEL_DATA_INDEX
    STX     TMP
    STX     GAME_ROWNUM
    TXA

    LDX     30
.loop1
    STA     TABLE_0CE0,X
    DEX
    BPL     .loop1

    LDX     5
.loop2
    STA     TABLE_0C98,X
    DEX
    BPL     .loop2
@

The level data is stored in "compressed" form, just 4 bits per sprite since we
don't use any higher ones to define a level. For each of the 16 game rows,
we load up the compressed row data and break it apart, one 4-bit sprite per
column.

Once we've done that, we draw the level using [[DRAW_LEVEL_PAGE2]]. That
routine returns an error if there was no player sprite in the level. If
there was no error, we simply return. Otherwise we have to handle the
error condition, since there's no point in playing without a player!

<<uncompress level data>>=
.row_loop:
<<get row destination pointer for uncompressing level data>>
<<uncompress row data>>
<<next compressed row for [[row_loop]]>>

    JSR     DRAW_LEVEL_PAGE2
    BCC     .end                ; No error

<<handle no player sprite in level>>

.end:
    RTS

.62c4:
    JMP     $6008       ; play? complain? fall over?
@

Each row will have their sprite data stored at locations specified by
the [[CURR_LEVEL_ROW_SPRITES_PTR_]] tables.

<<get row destination pointer for uncompressing level data>>=
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS,Y
    STA     PTR1
    STA     PTR2
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES,Y
    STA     PTR1+1
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES2,Y
    STA     PTR2+1
@

To uncompress the data for a row, we use the counter in [[TMP]] as an odd/even
switch so that we know which 4-bit chunk (nibble) in a byte we want. Even
numbers are for the low nibble while odd numbers are for the high nibble.

In addition, if we encounter any sprite number 10 or above then we replace it with
sprite 0 (all black).

<<uncompress row data>>=
    LDA     0
    STA     GAME_COLNUM

.col_loop:
    LDA     TMP                         ; odd/even counter
    LSR
    LDY     LEVEL_DATA_INDEX
    LDA     COMPRESSED_LEVEL_DATA,Y
    BCS     .628c                       ; odd? 
    AND     #$0F
    BPL     .6292                       ; unconditional jump
.628c

    LSR
    LSR
    LSR
    LSR
    INC     LEVEL_DATA_INDEX

.6292
    INC     TMP

    LDY     GAME_COLNUM
    CMP     10
    BCC     .629c
    LDA     0                           ; sprite >= 10 -> sprite 0
.629c:

    STA     (PTR1),Y
    STA     (PTR2),Y

    INC     GAME_COLNUM
    LDA     GAME_COLNUM
    CMP     28
    BCC     .col_loop                   ; loop while GAME_COLNUM < 28
@

<<next compressed row for [[row_loop]]>>=
    INC     GAME_ROWNUM
    LDY     GAME_ROWNUM
    CPY     16
    BCC     .row_loop                   ; loop while GAME_ROWNUM < 16
@

When there's no player sprite in the level, a few things can happen. Firstly,
if [[\$96]] is zero, we're going to jump to [[\$6008]]. Otherwise, we set
[[\$96]] to zero, increment [[\$97]], set X to [[0xFF]],
and retry [[LOAD_LEVEL]] from the very beginning.

<<handle no player sprite in level>>=
    LDA     $96
    BEQ     .62c4

    LDX     0
    STX     $96
    INC     $97
    DEX
    JMP     LOAD_LEVEL
@

\chapter{High scores}

For this routine, we have two indexes. The first is stored in [[\$55]] and is the high score
number, from 1 to 10. The second is stored in [[\$56]] and keeps our place in the actual
high score data table stored at [[\$1F00]].

There are ten slots in the high score table, each with eight bytes. The first three bytes are
for the player initials, the fourth byte is the level -- or zero if the row should be empty -- and
the last four bytes are the BCD-encoded score, most significant byte first.

<<defines>>=
HI_SCORE_DATA    EQU     $1F00
@ %def HI_SCORE_DATA

<<construct and display high score screen>>=
    ORG     $786B

HI_SCORE_SCREEN:
    SUBROUTINE

    JSR     CLEAR_HGR2
    LDA     #$40
    STA     DRAW_PAGE
    LDA     #$00
    STA     GAME_COLNUM
    STA     GAME_ROWNUM

    <<draw high score table header>>
    <<draw high score rows>>
    <<show high score page>>
@ %def HI_SCORE_SCREEN

<<draw high score table header>>=
    ; "    LODE RUNNER HIGH SCORES\r"
    ; "\r"
    ; "\r"
    ; "    INITIALS LEVEL  SCORE\r"
    ; "    -------- ----- --------\r"
    JSR     PUT_STRING
    HEX     A0 A0 A0 A0 CC CF C4 C5 A0 D2 D5 CE CE C5 D2 A0
    HEX     C8 C9 C7 C8 A0 D3 C3 CF D2 C5 D3 8D 8D 8D A0 A0
    HEX     A0 A0 C9 CE C9 D4 C9 C1 CC D3 A0 CC C5 D6 C5 CC
    HEX     A0 A0 D3 C3 CF D2 C5 8D A0 A0 A0 A0 AD AD AD AD
    HEX     AD AD AD AD A0 AD AD AD AD AD A0 AD AD AD AD AD
    HEX     AD AD AD 8D 00
@

<<draw high score rows>>=
    LDA     #$01
    STA     $55             ; Used for row number
.loop:
    <<draw high score row number>>
    <<draw high score initials>>
    <<draw high score level>>
    <<draw high score>>
    <<next high score row>>
@

<<draw high score row number>>=
    CMP     #$0A
    BNE     .display_0_to_9
    LDA     #1
    JSR     PUT_DIGIT
    LDA     #0
    JSR     PUT_DIGIT
    JMP     .rest_of_row_number

.display_0_to_9:
    LDA     #$A0
    JSR     PUT_CHAR        ; space
    LDA     $55
    JSR     PUT_DIGIT

.rest_of_row_number:
    ; ".    "
    JSR     PUT_STRING
    HEX     AE A0 A0 A0 A0 00
@

<<tables>>=
    ORG     $79A2
HI_SCORE_TABLE_OFFSETS:
    HEX     00 08 10 18 20 28 30 38 40 48
@ %def HI_SCORE_TABLE_OFFSETS

<<draw high score initials>>=
    LDX     $55
    LDY     HI_SCORE_TABLE_OFFSETS,X
    STY     $56
    LDA     HI_SCORE_DATA+3,Y
    BNE     .draw_initials
    JMP     .next_high_score_row
.draw_initials:
    LDY     $56
    LDA     HI_SCORE_DATA,Y
    JSR     PUT_CHAR
    LDY     $56
    LDA     HI_SCORE_DATA+1,Y
    JSR     PUT_CHAR
    LDY     $56
    LDA     HI_SCORE_DATA+2,Y
    JSR     PUT_CHAR

    ; "    "
    JSR     PUT_STRING
    HEX     A0 A0 A0 A0 00
@

<<draw high score level>>=
    LDY     $56
    LDA     HI_SCORE_DATA+3,Y
    JSR     TO_DECIMAL3
    LDA     HUNDREDS
    JSR     PUT_DIGIT
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT

    ; "  "
    JSR     PUT_STRING
    HEX     A0 A0 00
@

<<draw high score>>=
    LDY     $56
    LDA     HI_SCORE_DATA+4,Y
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT

    LDY     $56
    LDA     HI_SCORE_DATA+5,Y
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT

    LDY     $56
    LDA     HI_SCORE_DATA+6,Y
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT

    LDY     $56
    LDA     HI_SCORE_DATA+7,Y
    JSR     BCD_TO_DECIMAL2
    LDA     TENS
    JSR     PUT_DIGIT
    LDA     UNITS
    JSR     PUT_DIGIT
@

<<next high score row>>=
.next_high_score_row:
    JSR     NEWLINE
    INC     $55
    LDA     $55
    CMP     #11
    BCS     .end
    JMP     .loop
@

<<defines>>=
TXTPAGE2                EQU     $C055
@ %def TXTPAGE2

<<show high score page>>=
.end:
    STA     TXTPAGE2        ; Flip to page 2
    LDA     #$20
    STA     DRAW_PAGE       ; Set draw page to 1
    RTS
@

\chapter{Game play}

\section{Splash screen}

<<splash screen>>=
    ORG     $6008
.main:
    JSR     CLEAR_HGR1

    LDA     #$FF
    STA     .rd_table+1
    LDA     #$0E
    STA     .rd_table+2     ; RD_TABLE = 0x0EFF
    LDY     0
    STY     GAME_ROWNUM
    STY     PREGAME_MODE
    STY     $96             ; GAME_ROWNUM = $96 = PREGAME_MODE = 0
    LDA     #$20
    STA     HGR_PAGE
    STA     DRAW_PAGE       ; HGR_PAGE = DRAW_PAGE = 0x20

    <<splash screen loop>>

    STA     TXTPAGE1
    STA     HIRES
    STA     MIXCLR
    STA     TXTCLR
    JMP     .618E
@

This loop writes a screen of graphics by reading from the table starting at [[\$0F00]].
The table is in pairs of bytes, where the
first byte is the byte offset from the beginning of the row, and the second byte is the byte
to write. However, if the first byte is [[0x00]] then we end that row.

As in other cases, the pointer into the table is stored in the [[LDA]] instruction that reads from
the table.

The code takes advantage of the fact that all bytes written to the page have their high bit
set, while offsets from the beginning of the row are always less than [[0x80]]. Thus, if we
read a byte and it is [[0x00]], we end the loop. Otherwise, if the byte is less than [[0x80]] we
set that as the offset. Otherwise, the byte has its high bit set, and we write that byte to the
graphics page.

<<splash screen loop>>=
.draw_splash_screen_row:
    JSR     ROW_TO_ADDR     ; ROW_ADDR = ROW_TO_ADDR(Y)
    LDY     #0

.loop:
    INC     .rd_table+1
    BNE     .rd_table
    INC     .rd_table+2     ; RD_TABLE++

.rd_table:
    LDA     $1A84           ; A <- *RD_TABLE ($1A84 is just a dummy value)
    BEQ     .end_of_row     ; if A == 0: break
    BPL     .is_row_offset  ; if A > 0: A -> Y, .loop
    STA     (ROW_ADDR),Y    ; *(ROW_ADDR+Y) = A

    INY                     ; Y++
    BPL     .loop           ; While Y < 0x80 (really while not 00)

.is_row_offset:
    TAY
    BPL     .loop           ; Unconditional jump

.end_of_row:
    INC     GAME_ROWNUM
    LDY     GAME_ROWNUM
    CPY     #192
    BCC     .draw_splash_screen_row
@

\section{Startup code}

The startup code is run immediately after relocating memory blocks.

<<startup code>>=
    <<set startup softswitches>>
    <<set stack size>>
    <<maybe set carry but not really>>
    <<ready yourself>>
@

The first address, [[ROMIN_RDROM_WRRAM2]] is a bank-select switch. By reading it twice, we set
up the memory area from [[\$D000-\$DFFF]] to read from the ROM, but write to RAM bank 2.

The next four softswiches set up the display for full-screen hi-res graphics, page 1.

<<defines>>=
ROMIN_RDROM_WRRAM2      EQU     $C081
TXTCLR                  EQU     $C050
MIXCLR                  EQU     $C052
TXTPAGE1                EQU     $C054
HIRES                   EQU     $C057
@ %def ROMIN_RDROM_WRRAM2 TXTCLR MIXCLR TXTPAGE1 HIRES

<<set startup softswitches>>=
    ORG     $5F7D

    LDA     ROMIN_RDROM_WRRAM2
    LDA     ROMIN_RDROM_WRRAM2
    LDA     TXTCLR
    LDA     MIXCLR
    LDA     TXTPAGE1
    LDA     HIRES
@

The 6502 stack, at maximum, runs from [[\$0100-\$01FF]]. The stack starts at [[\$0100]] plus the stack
index (the S register), and grows towards [[\$0100]]. Here we are setting the S register to [[0x07]]
which makes for a very small stack -- 8 bytes.

<<set stack size>>=
    LDX     #$07
    TXS
@

This next part seems to set the carry only if certain bits in location [[\$5F94]] are set. I can
find no writes to this location, so the effect is that the carry is cleared. It's entirely possible
that this was altered by the cracker.

<<maybe set carry but not really>>=
    CLC
    LDA     #$01
    AND     #$A4
    BEQ     .short_delay_mode
    SEC
    ; fall through to short delay mode
@

This next part sets the delay for this game mode, and also reads the keyboard strobe softswtich.
That just clears the keyboard strobe in readiness to see if a key is pressed. Then we get dumped
into the main loop.

<<defines>>=
KBDSTRB     EQU     $C010
@ %def KBDSTRB

<<ready yourself>>=
    ORG     $5F9A

.short_delay_mode:
    LDX     #$22            ; Number of times to check for keyboard press (34).
    LDY     #$02            ; Number of times to do X checks (2).
                            ; GAME_ROWNUM was initialized to 1, so we do 34*2*1 checks.
    LDA     KBDSTRB
    LDA     #$CA            ; Fake keypress 0x4A (J)
    JMP     .check_for_button_down
@

Checking for a joystick button (or equivalently the open apple and solid apple keys) to be pressed
involves checking the high bit after reading the corresponding button softswitch. Here we're checking
if any of the buttons are pressed.

<<defines>>=
BUTN0       EQU     $C061       ; Or open apple
BUTN1       EQU     $C062       ; Or solid apple
STORED_KEY  EQU     $95
    ORG     $95
    HEX     CA
@ %def BUTN0 BUTN1 STORED_KEY

<<check for button down>>=
    ORG     $6199

.check_stored_key:
    LDA     STORED_KEY

.check_for_button_down:
    CMP     #$CB                ; Key pressed is 0x4B (K)?
    BEQ     .no_button_pressed  ; Skip check button presses.
    LDA     BUTN1
    BMI     .button_pressed
    LDA     BUTN0
    BMI     .button_pressed

    ; fall through to .no_button_pressed
@

Here we read the keyboard, which involves checking the high bit of the [[KBD]] softswitch. This
also loads the ASCII code for the key. We check for a keypress in a loop based on the X and Y registers,
and on [[GAME_ROWNUM]]! So we check for [[X x Y x GAME_ROWNUM]] iterations. This controls
alternation between "attract-mode" gameplay and the high score screen.

<<defines>>=
KBD         EQU     $C000
@ %def KBD

<<no button pressed>>=
    ORG     $61A9

.no_button_pressed:
    LDA     KBD
    BMI     .key_pressed
    DEX
    BNE     .check_stored_key
    DEY
    BNE     .check_stored_key
    DEC     GAME_ROWNUM
    BNE     .check_stored_key

    ; fall through to .no_button_or_key_timeout
@

If one of the joystick buttons was pressed:

<<button pressed at startup>>=
    ORG     $6201

.button_pressed:
    LDX     #$00
    STX     $96
    INX
    STX     LEVELNUM
    STX     $9D
    LDA     #$02
    STX     PREGAME_MODE
    JMP     .play_game
@

And if one of the keys was pressed:

<<key pressed at startup>>=
    ORG     $61F6

.key_pressed:
    STA     KBDSTRB     ; Clear keyboard strobe
    CMP     #$85        ; if ctrl-E:
    BEQ     .ctrl_e_pressed
    CMP     #$8D        ; if return key:
    BEQ     .return_pressed

    ; fall through to .button_pressed
@

Two keys are special, ctrl-E, which opens the level editor, and return, which starts a new game (?).

<<ctrl-e pressed>>=
    ORG     $6211

.ctrl_e_pressed:
    JMP     .start_level_editor
@

<<return pressed>>=
    ORG     $61E4

.return_pressed:
    LDA     #$01
    JSR     $6359
@

Finally, if no key or button was pressed and we've reached the maximum number of polls through the loop:

<<timed out waiting for button or keypress>>=
    ORG     $61B8

.no_button_or_key_timeout:
    LDA     PREGAME_MODE
    BNE     .check_game_mode    ; If PREGAME_MODE != 0, .check_game_mode.

    ; When PREGAME_MODE = 0:
    LDX     #$01
    STX     PREGAME_MODE        ; Set PREGAME_MODE = 1
    STX     LEVELNUM
    STX     $AC
    STX     $9D                 ; LEVELNUM = $AC = $9D = 1
    LDX     $99
    STX     .restore_99+1       ; Save previous value of $99
    STA     $99                 ; $99 = 0
    JMP     .init_game_data
@

<<check game mode>>=
    ORG     $61DE

.check_game_mode:
    CMP     #$01
    BNE     .game_mode_not_1
    BEQ     .display_high_score_screen        ; Unconditional jump
@

<<game mode not 1>>=
    ORG     $61F3

.game_mode_not_1:
    JMP     $6008
@

<<display high score screen>>=
    ORG     $61E9

.display_high_score_screen:
    JSR     HI_SCORE_SCREEN
    LDA     #$02
    STA     PREGAME_MODE            ; PREGAME_MODE = 2
    JMP     .long_delay_attact_mode
@

When we change over to attract mode, we set the delay to the next mode very large: 195075 times
around the loop.

<<long delay attract mode>>=
    ORG     $618E

.long_delay_attact_mode:
    JSR     $869f
    LDX     #$FF
    LDY     #$FF
    LDA     #$03
    STA     GAME_ROWNUM

    ; fall through to .check_stored_key
@

\section{Moving the player}

The player's sprite position is stored in [[PLAYER_COL]] and [[PLAYER_ROW]], while the offset from
the exact sprive location is stored in [[PLAYER_X_ADJ]] and [[PLAYER_Y_ADJ]]. These adjustments are offset by 2, so that
2 means zero offset. The player also has a [[PLAYER_ANIM_STATE]] which is an index into the
[[SPRITE_ANIM_SEQS]] table. The [[GET_SPRITE_AND_SCREEN_COORD_AT_PLAYER]] gets the sprite corresponding
to the player's animation state and the player's adjusted screen coordinate.

<<tables>>=
    ORG     $6968
SPRITE_ANIM_SEQS:
    HEX     0B 0C 0D        ; player running left
    HEX     18 19 1A        ; player monkey swinging left
    HEX     0F              ; player digging left
    HEX     13              ; player falling, facing left
    HEX     09 10 11        ; player running right
    HEX     15 16 17        ; player monkey swinging right
    HEX     25              ; player digging right
    HEX     14              ; player falling, facing right
    HEX     0E 12           ; player climbing on ladder
@ %def SPRITE_ANIM_SEQS

<<get player sprite data>>=
    ORG     $6B85
GET_SPRITE_AND_SCREEN_COORD_AT_PLAYER:
    SUBROUTINE
    ; Using PLAYER_COL/ROW, PLAYER_X/Y_ADJ, and PLAYER_ANIM_STATE,
    ; return the player sprite in A, and the screen coords in X and Y.

    LDX     PLAYER_COL
    LDY     PLAYER_X_ADJ
    JSR     GET_HALF_SCREEN_COL_OFFSET_IN_Y_FOR
    STX     SPRITE_NUM          ; Used only as a temporary to save X
    LDY     PLAYER_ROW
    LDX     PLAYER_Y_ADJ
    JSR     GET_SCREEN_ROW_OFFSET_IN_X_FOR
    LDX     PLAYER_ANIM_STATE
    LDA     SPRITE_ANIM_SEQS,X
    LDX     SPRITE_NUM
    RTS
@ %def GET_SPRITE_AND_SCREEN_COORD_AT_PLAYER

Since [[PLAYER_ANIM_STATE]] needs to play a sequence over and over, there is a routine
to increment the animation state and wrap if necessary. It works by loading A with the
lower bound, and X with the upper bound.

<<increment player animation state>>=
    ORG     $6BF4
INC_ANIM_STATE:
    SUBROUTINE

    INC     PLAYER_ANIM_STATE
    CMP     PLAYER_ANIM_STATE
    BCC     .check_upper_bound      ; lower bound < PLAYER_ANIM_STATE?
    ; otherwise PLAYER_ANIM_STATE <= lower bound:

.write_lower_bound:
    STA     PLAYER_ANIM_STATE       ; PLAYER_ANIM_STATE = lower bound
    RTS

.check_upper_bound:
    CPX     PLAYER_ANIM_STATE
    BCC     .write_lower_bound       ; PLAYER_ANIM_STATE > upper bound?
    ; otherwise PLAYER_ANIM_STATE <= upper bound:
    RTS
@ %def INC_ANIM_STATE

This routine checks whether the player picks up gold. First we check to see if the player's location
is exactly on a sprite coordinate, and return if not. Otherwise, we check the phantom sprite data
to see if there's gold at the player's location, and return if not. So if there is gold, we decrement
the gold count, put a blank sprite in the phantom sprite data, increment the score by 250, place
a gold sprite on the screen at the player location, and then load up data into the sound area.

<<check for gold picked up by player>>=
    ORG     $6B9D
CHECK_FOR_GOLD_PICKED_UP_BY_PLAYER:
    SUBROUTINE

    LDA     PLAYER_X_ADJ
    CMP     #$02
    BNE     .end
    LDA     PLAYER_Y_ADJ
    CMP     #$02
    BNE     .end

    LDY     PLAYER_ROW
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS,Y
    STA     PTR2
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES2,Y
    STA     PTR2+1                                  ; PTR2 <- CURR_LEVEL_ROW_SPRITES_PTR2_ + PLAYER_ROW

    LDY     PLAYER_COL
    LDA     (PTR2),Y
    CMP     #$07                ; Gold
    BNE     .end

    LSR     $94
    DEC     GOLD_COUNT          ; GOLD_COUNT--

    LDY     PLAYER_ROW
    STY     GAME_ROWNUM
    LDY     PLAYER_COL
    STY     GAME_COLNUM
    LDA     #$00
    STA     (PTR2),Y
    JSR     DRAW_SPRITE_PAGE2   ; Register and draw blank at player loc in PTR2

    LDY     PLAYER_ROW
    LDX     PLAYER_COL
    JSR     GET_SCREEN_COORDS_FOR
    LDA     #$07                            ; Gold
    JSR     DRAW_SPRITE_AT_PIXEL_COORDS     ; Draw gold at player loc

    LDY     #$02
    LDA     #$50
    JSR     ADD_AND_UPDATE_SCORE            ; SCORE += 250
    JSR     LOAD_SOUND_DATA
    HEX     07 45 06 55 05 44 04 54 03 43 02 53 00

.end:
    RTS
@

<<move player>>=
    ORG     $64BD
MOVE_PLAYER:
    SUBROUTINE

    LDA     #$01
    STA     $94                     ; $94 = 1
    LDA     $9C
    BEQ     .data_9C_zero           ; If $9C == 0
    BPL     .data_9C_positive_      ; If $9C < 0x80
    JMP     $67E7                   ; Otherwise (if $9C >= 0x80)

.data_9C_positive_:
    JMP     data_9C_positive

.data_9C_zero:
    LDY     PLAYER_ROW
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS,Y
    STA     PTR2
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES2,Y
    STA     PTR2+1                                  ; PTR2 <- CURR_LEVEL_ROW_SPRITES_PTR2_ + PLAYER_ROW

    LDY     PLAYER_COL
    LDA     (PTR2),Y
    CMP     #$03
    BEQ     .sprite_is_ladder_                      ; ladder at phantom location?
    CMP     #$04
    BEQ     .sprite_is_pole                         ; pole at phantom location?
    LDA     PLAYER_Y_ADJ
    CMP     #$02
    BEQ     .sprite_is_ladder_                      ; player at exact sprite row?

    ; player is not on exact sprite row, fallthrough.

.sprite_is_pole:
    LDA     PLAYER_Y_ADJ
    CMP     #$02                                    
    BCC     .player_moving_up                       ; player to the left of sprite row?
    LDY     PLAYER_ROW
    CPY     #$0F
    BEQ     .sprite_is_ladder_                      ; player exactly sprite row 15?

    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS+1,Y
    STA     PTR1
    STA     PTR2
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES+1,Y
    STA     PTR1+1                                  ; PTR1 = CURR_LEVEL_ROW_SPRITES_PTR_ + Y
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES2+1,Y
    STA     PTR2+1                                  ; PTR2 = CURR_LEVEL_ROW_SPRITES_PTR2_ + Y

    LDY     PLAYER_COL
    LDA     (PTR1),Y
    CMP     #$00                    ; Empty
    BEQ     .player_moving_up
    CMP     #$08                    ; Guard
    BEQ     .sprite_is_ladder_
    LDA     (PTR2),Y
    CMP     #$01                    ; Brick
    BEQ     .sprite_is_ladder_
    CMP     #$02                    ; Stone
    BEQ     .sprite_is_ladder_
    CMP     #$03                    ; Ladder
    BNE     .player_moving_up

.sprite_is_ladder_:
    JMP     .sprite_is_ladder

.player_moving_up:
    LDA     #$00
    STA     $9B                     ; $9B = 0
    JSR     GET_SPRITE_AND_SCREEN_COORD_AT_PLAYER
    ; A = sprite number
    ; X = half screen col
    ; Y = screen row
    JSR     DRAW_SPRITE_AT_PIXEL_COORDS

    LDA     #$07                    ; Next anim state: player falling, facing left
    LDX     PLAYER_FACING_DIRECTION
    BMI     .player_facing_left
    LDA     #$0F                    ; Next anim state: player falling, facing right
.player_facing_left:
    STA     PLAYER_ANIM_STATE

    JSR     $6C13

    INC     PLAYER_Y_ADJ            ; Go down faster
    LDA     PLAYER_Y_ADJ
    CMP     #$05
    BCS     .down_too_fast          ; PLAYER_Y_ADJ >= 5
    JSR     CHECK_FOR_GOLD_PICKED_UP_BY_PLAYER
    JMP     $6C02           ; tailcall

.down_too_fast:
    LDA     #$00
    STA     PLAYER_Y_ADJ            ; Wrap around to move up???

    LDY     PLAYER_ROW
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS+1,Y
    STA     PTR1
    STA     PTR2
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES+1,Y
    STA     PTR1+1                                  ; PTR1 = CURR_LEVEL_ROW_SPRITES_PTR_ + PLAYER_ROW
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES2+1,Y
    STA     PTR2+1                                  ; PTR2 = CURR_LEVEL_ROW_SPRITES_PTR2_ + PLAYER_ROW

    LDY     PLAYER_COL
    LDA     (PTR2),Y
    CMP     #$01                ; Brick
    BNE     .move_down
    LDA     #$00                ; Store empty sprite

.move_down:
    STA     (PTR1),Y
    INC     PLAYER_ROW          ; Move down

    LDA     CURR_LEVEL_ROW_SPRITES_PTR_OFFSETS+1,Y
    STA     PTR1
    LDA     CURR_LEVEL_ROW_SPRITES_PTR_PAGES+1,Y
    STA     PTR1+1                                  ; PTR1 = CURR_LEVEL_ROW_SPRITES_PTR_ + PLAYER_ROW
    LDY     PLAYER_COL
    LDA     #$09            ; player facing right
    STA     (PTR1),Y
    JMP     $6C02           ; tailcall

.sprite_is_ladder:
    LDA     $9B
    BNE     .658f
    LDA     #$64
    LDX     #$08
    JSR     PLAY_NOTE

.658f:
    LDA     #$20
    STA     $A4
    STA     $9B
    JSR     $6A12
    LDA     $9E
    CMP     #$C9
    BNE     .65a4
    JSR     $66BD
    BCS     .65c2
    RTS


@ %def MOVE_PLAYER



\section{Initialization}

<<Initialize game data>>=
    ORG     $6056

.init_game_data:
    LDA     0
    STA     SCORE
    STA     SCORE+1
    STA     SCORE+2
    STA     SCORE+3
    STA     $97
    STA     WIPE_MODE       ; WIPE_MODE = SCORE = $97 = 0
    STA     $53
    STA     $AB
    STA     $A8             ; $53 = $AB = $A8 = 0
    LDA     #$9b    ; 155
    STA     $A9             ; $A9 = 155
    LDA     5
    STA     LIVES           ; LIVES = 5
    LDA     PREGAME_MODE
    LSR
    ; if PREGAME_MODE was 0 or 1 (i.e. not displaying high score screen),
    ; play the game.
    BEQ     .put_status_and_start_game   

    ; We were displaying the high score screen
    LDA     1
    JSR     $6359
    CMP     #$00
    BNE     .6086
    JSR     $8106
    JMP     $6008

.6086:
    LDA     $1FFF
    BNE     .6091
    LDA     $36
    LDX     $37
    BNE     .6095

.6091:
    LDA     $38
    LDX     $39

.6095:
    STA     JMP_ADDR
    STX     JMP_ADDR+1

.put_status_and_start_game:
    JSR     PUT_STATUS
    STA     TXTPAGE1
@

<<start game>>=
    ORG     $609F

.start_game:
    LDX     #$01
    JSR     LOAD_LEVEL
    LDA     #$00
    STA     $9E
    STA     $9F
    LDA     PREGAME_MODE
    LSR
    ; if PREGAME_MODE was 0 or 1 (i.e. not displaying high score screen),
    ; play the game.
    BEQ     .play_game

    ; When PREGAME_MODE is 2:
    JSR     $869F
    LDA     PLAYER_COL
    STA     GAME_COLNUM
    LDA     PLAYER_ROW
    STA     GAME_ROWNUM
    LDA     #$09
    JSR     $8700

.play_game:
    LDX     #$00
    STX     $9C
    STX     NOTE_INDEX

    LDA     $97
    CLC
    ADC     GUARD_COUNT         ; GUARD_COUNT + $97 can't be greater than 8.
    TAY
    LDX     TIMES_3_TABLE,Y     ; X = 3 * Y
    LDA     $6CA7,X
    STA     $60
    LDA     $6CA8,X
    STA     $61
    LDA     $6CA9,X
    STA     $62

    LDY     $97
    LDA     $621D,Y
    STA     $5F
@

<<game loop>>=
    JSR     MOVE_PLAYER
@

<<tables>>=
    ORG     $6214
TIMES_3_TABLE:
    HEX     00 03 06 09 0C 0F 12 15 18
@ %def TIMES_3_TABLE

\chapter{The whole thing}
We then put together the entire assembly file:

<<routines>>=
    ; Ideally these are in the order they were placed in the original file.
    ; However, since each section should start with ORG, it should not be
    ; necessary.
    <<startup code>>

    ; Graphics routines
    <<level draw routine>>
    <<splash screen>>
    <<construct and display high score screen>>
    <<iris wipe>>
    <<iris wipe step>>
    <<draw wipe step>>
    <<draw wipe block>>

    ; Sound routines
    <<load sound data>>
    <<sound delay>>
    <<play note>>
    <<play sound>>
@

<<*>>=
    PROCESSOR 6502
    <<defines>>
    <<tables>>
    <<routines>>
@

\chapter{Defined Chunks}\par\noindent
\nowebchunks
\chapter{Index}\par\noindent
\nowebindex
@
\end{document}
